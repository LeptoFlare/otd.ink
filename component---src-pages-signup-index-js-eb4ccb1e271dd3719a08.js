(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{"5VHT":function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__("M/dN");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2xlYXZlLmpzL3JlYWN0LmpzP2FjZjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG1CQUFPLENBQUMsTUFBNkIiLCJmaWxlIjoiNVZIVC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L2NsZWF2ZS1yZWFjdC1ub2RlLmpzJyk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5VHT\n')},"M/dN":function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {__webpack_require__(\"E9XD\");\n\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (true) module.exports = factory(__webpack_require__(\"q1tI\"));else {}\n})(this, function (__WEBPACK_EXTERNAL_MODULE_1__) {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId])\n          /******/\n          return installedModules[moduleId].exports;\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n        var module = installedModules[moduleId] = {\n          /******/\n          exports: {},\n\n          /******/\n          id: moduleId,\n\n          /******/\n          loaded: false\n          /******/\n\n        };\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.loaded = true;\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n      __webpack_require__.p = \"\";\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      var _extends = Object.assign || function (target) {\n        for (var i = 1; i < arguments.length; i++) {\n          var source = arguments[i];\n\n          for (var key in source) {\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n              target[key] = source[key];\n            }\n          }\n        }\n\n        return target;\n      };\n\n      function _objectWithoutProperties(obj, keys) {\n        var target = {};\n\n        for (var i in obj) {\n          if (keys.indexOf(i) >= 0) continue;\n          if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n          target[i] = obj[i];\n        }\n\n        return target;\n      }\n\n      var React = __webpack_require__(1); // eslint-disable-line no-unused-vars\n\n\n      var CreateReactClass = __webpack_require__(2);\n\n      var NumeralFormatter = __webpack_require__(9);\n\n      var DateFormatter = __webpack_require__(10);\n\n      var TimeFormatter = __webpack_require__(11);\n\n      var PhoneFormatter = __webpack_require__(12);\n\n      var CreditCardDetector = __webpack_require__(13);\n\n      var Util = __webpack_require__(14);\n\n      var DefaultProperties = __webpack_require__(15);\n\n      var cleaveReactClass = CreateReactClass({\n        componentDidMount: function componentDidMount() {\n          this.init();\n        },\n        componentDidUpdate: function componentDidUpdate(prevProps) {\n          var owner = this,\n              phoneRegionCode = (owner.props.options || {}).phoneRegionCode,\n              newValue = owner.props.value,\n              pps = owner.properties;\n          owner.updateRegisteredEvents(owner.props);\n\n          if (prevProps.value !== newValue && newValue !== undefined && newValue !== null) {\n            newValue = newValue.toString();\n\n            if (newValue !== owner.properties.result) {\n              owner.properties.initValue = newValue;\n              owner.onInput(newValue, true);\n            }\n          } // update phone region code\n\n\n          var prevPhoneRegionCode = (prevProps.options || {}).phoneRegionCode;\n\n          if (prevPhoneRegionCode !== phoneRegionCode && phoneRegionCode && phoneRegionCode !== owner.properties.phoneRegionCode) {\n            owner.properties.phoneRegionCode = phoneRegionCode;\n            owner.initPhoneFormatter();\n            owner.onInput(owner.properties.result);\n          }\n\n          Util.setSelection(owner.element, owner.state.cursorPosition, pps.document);\n        },\n        updateRegisteredEvents: function updateRegisteredEvents(props) {\n          var owner = this,\n              _owner$registeredEven = owner.registeredEvents,\n              onKeyDown = _owner$registeredEven.onKeyDown,\n              onChange = _owner$registeredEven.onChange,\n              onFocus = _owner$registeredEven.onFocus,\n              onBlur = _owner$registeredEven.onBlur,\n              onInit = _owner$registeredEven.onInit;\n          if (props.onInit && props.onInit !== onInit) owner.registeredEvents.onInit = props.onInit;\n          if (props.onChange && props.onChange !== onChange) owner.registeredEvents.onChange = props.onChange;\n          if (props.onFocus && props.onFocus !== onFocus) owner.registeredEvents.onFocus = props.onFocus;\n          if (props.onBlur && props.onBlur !== onBlur) owner.registeredEvents.onBlur = props.onBlur;\n          if (props.onKeyDown && props.onKeyDown !== onKeyDown) owner.registeredEvents.onKeyDown = props.onKeyDown;\n        },\n        getInitialState: function getInitialState() {\n          var owner = this,\n              _owner$props = owner.props,\n              value = _owner$props.value,\n              options = _owner$props.options,\n              onKeyDown = _owner$props.onKeyDown,\n              onChange = _owner$props.onChange,\n              onFocus = _owner$props.onFocus,\n              onBlur = _owner$props.onBlur,\n              onInit = _owner$props.onInit;\n          owner.registeredEvents = {\n            onInit: onInit || Util.noop,\n            onChange: onChange || Util.noop,\n            onFocus: onFocus || Util.noop,\n            onBlur: onBlur || Util.noop,\n            onKeyDown: onKeyDown || Util.noop\n          };\n\n          if (!options) {\n            options = {};\n          }\n\n          options.initValue = value;\n          owner.properties = DefaultProperties.assign({}, options);\n          return {\n            value: owner.properties.result,\n            cursorPosition: 0\n          };\n        },\n        init: function init() {\n          var owner = this,\n              pps = owner.properties; // so no need for this lib at all\n\n          if (!pps.numeral && !pps.phone && !pps.creditCard && !pps.time && !pps.date && pps.blocksLength === 0 && !pps.prefix) {\n            owner.onInput(pps.initValue);\n            owner.registeredEvents.onInit(owner);\n            return;\n          }\n\n          pps.maxLength = Util.getMaxLength(pps.blocks);\n          owner.isAndroid = Util.isAndroid();\n          owner.initPhoneFormatter();\n          owner.initDateFormatter();\n          owner.initTimeFormatter();\n          owner.initNumeralFormatter(); // avoid touch input field if value is null\n          // otherwise Firefox will add red box-shadow for <input required />\n\n          if (pps.initValue || pps.prefix && !pps.noImmediatePrefix) {\n            owner.onInput(pps.initValue);\n          }\n\n          owner.registeredEvents.onInit(owner);\n        },\n        initNumeralFormatter: function initNumeralFormatter() {\n          var owner = this,\n              pps = owner.properties;\n\n          if (!pps.numeral) {\n            return;\n          }\n\n          pps.numeralFormatter = new NumeralFormatter(pps.numeralDecimalMark, pps.numeralIntegerScale, pps.numeralDecimalScale, pps.numeralThousandsGroupStyle, pps.numeralPositiveOnly, pps.stripLeadingZeroes, pps.prefix, pps.signBeforePrefix, pps.tailPrefix, pps.delimiter);\n        },\n        initTimeFormatter: function initTimeFormatter() {\n          var owner = this,\n              pps = owner.properties;\n\n          if (!pps.time) {\n            return;\n          }\n\n          pps.timeFormatter = new TimeFormatter(pps.timePattern, pps.timeFormat);\n          pps.blocks = pps.timeFormatter.getBlocks();\n          pps.blocksLength = pps.blocks.length;\n          pps.maxLength = Util.getMaxLength(pps.blocks);\n        },\n        initDateFormatter: function initDateFormatter() {\n          var owner = this,\n              pps = owner.properties;\n\n          if (!pps.date) {\n            return;\n          }\n\n          pps.dateFormatter = new DateFormatter(pps.datePattern, pps.dateMin, pps.dateMax);\n          pps.blocks = pps.dateFormatter.getBlocks();\n          pps.blocksLength = pps.blocks.length;\n          pps.maxLength = Util.getMaxLength(pps.blocks);\n        },\n        initPhoneFormatter: function initPhoneFormatter() {\n          var owner = this,\n              pps = owner.properties;\n\n          if (!pps.phone) {\n            return;\n          } // Cleave.AsYouTypeFormatter should be provided by\n          // external google closure lib\n\n\n          try {\n            pps.phoneFormatter = new PhoneFormatter(new pps.root.Cleave.AsYouTypeFormatter(pps.phoneRegionCode), pps.delimiter);\n          } catch (ex) {\n            throw new Error('Please include phone-type-formatter.{country}.js lib');\n          }\n        },\n        setRawValue: function setRawValue(value) {\n          var owner = this,\n              pps = owner.properties;\n          value = value !== undefined && value !== null ? value.toString() : '';\n\n          if (pps.numeral) {\n            value = value.replace('.', pps.numeralDecimalMark);\n          }\n\n          pps.postDelimiterBackspace = false;\n          owner.onChange({\n            target: {\n              value: value\n            },\n            // Methods to better resemble a SyntheticEvent\n            stopPropagation: Util.noop,\n            preventDefault: Util.noop,\n            persist: Util.noop\n          });\n        },\n        getRawValue: function getRawValue() {\n          var owner = this,\n              pps = owner.properties,\n              rawValue = pps.result;\n\n          if (pps.rawValueTrimPrefix) {\n            rawValue = Util.getPrefixStrippedValue(rawValue, pps.prefix, pps.prefixLength, pps.result, pps.delimiter, pps.delimiters, pps.noImmediatePrefix, pps.tailPrefix, pps.signBeforePrefix);\n          }\n\n          if (pps.numeral) {\n            rawValue = pps.numeralFormatter ? pps.numeralFormatter.getRawValue(rawValue) : '';\n          } else {\n            rawValue = Util.stripDelimiters(rawValue, pps.delimiter, pps.delimiters);\n          }\n\n          return rawValue;\n        },\n        getISOFormatDate: function getISOFormatDate() {\n          var owner = this,\n              pps = owner.properties;\n          return pps.date ? pps.dateFormatter.getISOFormatDate() : '';\n        },\n        getISOFormatTime: function getISOFormatTime() {\n          var owner = this,\n              pps = owner.properties;\n          return pps.time ? pps.timeFormatter.getISOFormatTime() : '';\n        },\n        onInit: function onInit(owner) {\n          return owner;\n        },\n        onKeyDown: function onKeyDown(event) {\n          var owner = this,\n              pps = owner.properties,\n              charCode = event.which || event.keyCode;\n          owner.lastInputValue = pps.result;\n          owner.isBackward = charCode === 8;\n          owner.registeredEvents.onKeyDown(event);\n        },\n        onFocus: function onFocus(event) {\n          var owner = this,\n              pps = owner.properties;\n\n          if (pps.prefix && pps.noImmediatePrefix && !event.target.value) {\n            owner.onInput(pps.prefix);\n          }\n\n          event.target.rawValue = owner.getRawValue();\n          event.target.value = pps.result;\n          owner.registeredEvents.onFocus(event);\n          Util.fixPrefixCursor(owner.element, pps.prefix, pps.delimiter, pps.delimiters);\n        },\n        onBlur: function onBlur(event) {\n          var owner = this,\n              pps = owner.properties;\n          event.target.rawValue = owner.getRawValue();\n          event.target.value = pps.result;\n          owner.registeredEvents.onBlur(event);\n        },\n        onChange: function onChange(event) {\n          var owner = this,\n              pps = owner.properties;\n          owner.isBackward = owner.isBackward || event.inputType === 'deleteContentBackward'; // hit backspace when last character is delimiter\n\n          var postDelimiter = Util.getPostDelimiter(owner.lastInputValue, pps.delimiter, pps.delimiters);\n\n          if (owner.isBackward && postDelimiter) {\n            pps.postDelimiterBackspace = postDelimiter;\n          } else {\n            pps.postDelimiterBackspace = false;\n          }\n\n          owner.onInput(event.target.value);\n          event.target.rawValue = owner.getRawValue();\n          event.target.value = pps.result;\n          owner.registeredEvents.onChange(event);\n        },\n        onInput: function onInput(value, fromProps) {\n          var owner = this,\n              pps = owner.properties; // case 1: delete one more character \"4\"\n          // 1234*| -> hit backspace -> 123|\n          // case 2: last character is not delimiter which is:\n          // 12|34* -> hit backspace -> 1|34*\n\n          var postDelimiterAfter = Util.getPostDelimiter(value, pps.delimiter, pps.delimiters);\n\n          if (!fromProps && !pps.numeral && pps.postDelimiterBackspace && !postDelimiterAfter) {\n            value = Util.headStr(value, value.length - pps.postDelimiterBackspace.length);\n          } // phone formatter\n\n\n          if (pps.phone) {\n            if (pps.prefix && (!pps.noImmediatePrefix || value.length)) {\n              pps.result = pps.prefix + pps.phoneFormatter.format(value).slice(pps.prefix.length);\n            } else {\n              pps.result = pps.phoneFormatter.format(value);\n            }\n\n            owner.updateValueState();\n            return;\n          } // numeral formatter\n\n\n          if (pps.numeral) {\n            // Do not show prefix when noImmediatePrefix is specified\n            // This mostly because we need to show user the native input placeholder\n            if (pps.prefix && pps.noImmediatePrefix && value.length === 0) {\n              pps.result = '';\n            } else {\n              pps.result = pps.numeralFormatter.format(value);\n            }\n\n            owner.updateValueState();\n            return;\n          } // date\n\n\n          if (pps.date) {\n            value = pps.dateFormatter.getValidatedDate(value);\n          } // time\n\n\n          if (pps.time) {\n            value = pps.timeFormatter.getValidatedTime(value);\n          } // strip delimiters\n\n\n          value = Util.stripDelimiters(value, pps.delimiter, pps.delimiters); // strip prefix\n\n          value = Util.getPrefixStrippedValue(value, pps.prefix, pps.prefixLength, pps.result, pps.delimiter, pps.delimiters, pps.noImmediatePrefix, pps.tailPrefix, pps.signBeforePrefix); // strip non-numeric characters\n\n          value = pps.numericOnly ? Util.strip(value, /[^\\d]/g) : value; // convert case\n\n          value = pps.uppercase ? value.toUpperCase() : value;\n          value = pps.lowercase ? value.toLowerCase() : value; // prevent from showing prefix when no immediate option enabled with empty input value\n\n          if (pps.prefix) {\n            if (pps.tailPrefix) {\n              value = value + pps.prefix;\n            } else {\n              value = pps.prefix + value;\n            } // no blocks specified, no need to do formatting\n\n\n            if (pps.blocksLength === 0) {\n              pps.result = value;\n              owner.updateValueState();\n              return;\n            }\n          } // update credit card props\n\n\n          if (pps.creditCard) {\n            owner.updateCreditCardPropsByValue(value);\n          } // strip over length characters\n\n\n          value = pps.maxLength > 0 ? Util.headStr(value, pps.maxLength) : value; // apply blocks\n\n          pps.result = Util.getFormattedValue(value, pps.blocks, pps.blocksLength, pps.delimiter, pps.delimiters, pps.delimiterLazyShow);\n          owner.updateValueState();\n        },\n        updateCreditCardPropsByValue: function updateCreditCardPropsByValue(value) {\n          var owner = this,\n              pps = owner.properties,\n              creditCardInfo; // At least one of the first 4 characters has changed\n\n          if (Util.headStr(pps.result, 4) === Util.headStr(value, 4)) {\n            return;\n          }\n\n          creditCardInfo = CreditCardDetector.getInfo(value, pps.creditCardStrictMode);\n          pps.blocks = creditCardInfo.blocks;\n          pps.blocksLength = pps.blocks.length;\n          pps.maxLength = Util.getMaxLength(pps.blocks); // credit card type changed\n\n          if (pps.creditCardType !== creditCardInfo.type) {\n            pps.creditCardType = creditCardInfo.type;\n            pps.onCreditCardTypeChanged.call(owner, pps.creditCardType);\n          }\n        },\n        updateValueState: function updateValueState() {\n          var owner = this,\n              pps = owner.properties;\n\n          if (!owner.element) {\n            owner.setState({\n              value: pps.result\n            });\n            return;\n          }\n\n          var endPos = owner.element.selectionEnd;\n          var oldValue = owner.element.value;\n          var newValue = pps.result;\n          owner.lastInputValue = newValue;\n          endPos = Util.getNextCursorPosition(endPos, oldValue, newValue, pps.delimiter, pps.delimiters);\n\n          if (owner.isAndroid) {\n            window.setTimeout(function () {\n              owner.setState({\n                value: newValue,\n                cursorPosition: endPos\n              });\n            }, 1);\n            return;\n          }\n\n          owner.setState({\n            value: newValue,\n            cursorPosition: endPos\n          });\n        },\n        render: function render() {\n          var owner = this; // eslint-disable-next-line\n\n          var _owner$props2 = owner.props,\n              value = _owner$props2.value,\n              options = _owner$props2.options,\n              onKeyDown = _owner$props2.onKeyDown,\n              onFocus = _owner$props2.onFocus,\n              onBlur = _owner$props2.onBlur,\n              onChange = _owner$props2.onChange,\n              onInit = _owner$props2.onInit,\n              htmlRef = _owner$props2.htmlRef,\n              propsToTransfer = _objectWithoutProperties(_owner$props2, ['value', 'options', 'onKeyDown', 'onFocus', 'onBlur', 'onChange', 'onInit', 'htmlRef']);\n\n          return React.createElement('input', _extends({\n            type: 'text',\n            ref: function ref(_ref) {\n              owner.element = _ref;\n\n              if (!htmlRef) {\n                return;\n              }\n\n              htmlRef.apply(this, arguments);\n            },\n            value: owner.state.value,\n            onKeyDown: owner.onKeyDown,\n            onChange: owner.onChange,\n            onFocus: owner.onFocus,\n            onBlur: owner.onBlur\n          }, propsToTransfer));\n        }\n      });\n      module.exports = cleaveReactClass;\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports) {\n      module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n       * Copyright (c) 2013-present, Facebook, Inc.\n       *\n       * This source code is licensed under the MIT license found in the\n       * LICENSE file in the root directory of this source tree.\n       *\n       */\n      'use strict';\n\n      var React = __webpack_require__(1);\n\n      var factory = __webpack_require__(3);\n\n      if (typeof React === 'undefined') {\n        throw Error('create-react-class could not find the React object. If you are using script tags, ' + 'make sure that React is being loaded before create-react-class.');\n      } // Hack to grab NoopUpdateQueue from isomorphic React\n\n\n      var ReactNoopUpdateQueue = new React.Component().updater;\n      module.exports = factory(React.Component, React.isValidElement, ReactNoopUpdateQueue);\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n       * Copyright (c) 2013-present, Facebook, Inc.\n       *\n       * This source code is licensed under the MIT license found in the\n       * LICENSE file in the root directory of this source tree.\n       *\n       */\n      'use strict';\n\n      var _assign = __webpack_require__(4);\n\n      var emptyObject = __webpack_require__(5);\n\n      var _invariant = __webpack_require__(6);\n\n      if (false) { var warning; }\n\n      var MIXINS_KEY = 'mixins'; // Helper function to allow the creation of anonymous functions which do not\n      // have .name set to the name of the variable being assigned to.\n\n      function identity(fn) {\n        return fn;\n      }\n\n      var ReactPropTypeLocationNames;\n\n      if (false) {} else {\n        ReactPropTypeLocationNames = {};\n      }\n\n      function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\n        /**\n         * Policies that describe methods in `ReactClassInterface`.\n         */\n        var injectedMixins = [];\n        /**\n         * Composite components are higher-level components that compose other composite\n         * or host components.\n         *\n         * To create a new type of `ReactClass`, pass a specification of\n         * your new class to `React.createClass`. The only requirement of your class\n         * specification is that you implement a `render` method.\n         *\n         *   var MyComponent = React.createClass({\n         *     render: function() {\n         *       return <div>Hello World</div>;\n         *     }\n         *   });\n         *\n         * The class specification supports a specific protocol of methods that have\n         * special meaning (e.g. `render`). See `ReactClassInterface` for\n         * more the comprehensive protocol. Any other properties and methods in the\n         * class specification will be available on the prototype.\n         *\n         * @interface ReactClassInterface\n         * @internal\n         */\n\n        var ReactClassInterface = {\n          /**\n           * An array of Mixin objects to include when defining your component.\n           *\n           * @type {array}\n           * @optional\n           */\n          mixins: 'DEFINE_MANY',\n\n          /**\n           * An object containing properties and methods that should be defined on\n           * the component's constructor instead of its prototype (static methods).\n           *\n           * @type {object}\n           * @optional\n           */\n          statics: 'DEFINE_MANY',\n\n          /**\n           * Definition of prop types for this component.\n           *\n           * @type {object}\n           * @optional\n           */\n          propTypes: 'DEFINE_MANY',\n\n          /**\n           * Definition of context types for this component.\n           *\n           * @type {object}\n           * @optional\n           */\n          contextTypes: 'DEFINE_MANY',\n\n          /**\n           * Definition of context types this component sets for its children.\n           *\n           * @type {object}\n           * @optional\n           */\n          childContextTypes: 'DEFINE_MANY',\n          // ==== Definition methods ====\n\n          /**\n           * Invoked when the component is mounted. Values in the mapping will be set on\n           * `this.props` if that prop is not specified (i.e. using an `in` check).\n           *\n           * This method is invoked before `getInitialState` and therefore cannot rely\n           * on `this.state` or use `this.setState`.\n           *\n           * @return {object}\n           * @optional\n           */\n          getDefaultProps: 'DEFINE_MANY_MERGED',\n\n          /**\n           * Invoked once before the component is mounted. The return value will be used\n           * as the initial value of `this.state`.\n           *\n           *   getInitialState: function() {\n           *     return {\n           *       isOn: false,\n           *       fooBaz: new BazFoo()\n           *     }\n           *   }\n           *\n           * @return {object}\n           * @optional\n           */\n          getInitialState: 'DEFINE_MANY_MERGED',\n\n          /**\n           * @return {object}\n           * @optional\n           */\n          getChildContext: 'DEFINE_MANY_MERGED',\n\n          /**\n           * Uses props from `this.props` and state from `this.state` to render the\n           * structure of the component.\n           *\n           * No guarantees are made about when or how often this method is invoked, so\n           * it must not have side effects.\n           *\n           *   render: function() {\n           *     var name = this.props.name;\n           *     return <div>Hello, {name}!</div>;\n           *   }\n           *\n           * @return {ReactComponent}\n           * @required\n           */\n          render: 'DEFINE_ONCE',\n          // ==== Delegate methods ====\n\n          /**\n           * Invoked when the component is initially created and about to be mounted.\n           * This may have side effects, but any external subscriptions or data created\n           * by this method must be cleaned up in `componentWillUnmount`.\n           *\n           * @optional\n           */\n          componentWillMount: 'DEFINE_MANY',\n\n          /**\n           * Invoked when the component has been mounted and has a DOM representation.\n           * However, there is no guarantee that the DOM node is in the document.\n           *\n           * Use this as an opportunity to operate on the DOM when the component has\n           * been mounted (initialized and rendered) for the first time.\n           *\n           * @param {DOMElement} rootNode DOM element representing the component.\n           * @optional\n           */\n          componentDidMount: 'DEFINE_MANY',\n\n          /**\n           * Invoked before the component receives new props.\n           *\n           * Use this as an opportunity to react to a prop transition by updating the\n           * state using `this.setState`. Current props are accessed via `this.props`.\n           *\n           *   componentWillReceiveProps: function(nextProps, nextContext) {\n           *     this.setState({\n           *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n           *     });\n           *   }\n           *\n           * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n           * transition may cause a state change, but the opposite is not true. If you\n           * need it, you are probably looking for `componentWillUpdate`.\n           *\n           * @param {object} nextProps\n           * @optional\n           */\n          componentWillReceiveProps: 'DEFINE_MANY',\n\n          /**\n           * Invoked while deciding if the component should be updated as a result of\n           * receiving new props, state and/or context.\n           *\n           * Use this as an opportunity to `return false` when you're certain that the\n           * transition to the new props/state/context will not require a component\n           * update.\n           *\n           *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n           *     return !equal(nextProps, this.props) ||\n           *       !equal(nextState, this.state) ||\n           *       !equal(nextContext, this.context);\n           *   }\n           *\n           * @param {object} nextProps\n           * @param {?object} nextState\n           * @param {?object} nextContext\n           * @return {boolean} True if the component should update.\n           * @optional\n           */\n          shouldComponentUpdate: 'DEFINE_ONCE',\n\n          /**\n           * Invoked when the component is about to update due to a transition from\n           * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n           * and `nextContext`.\n           *\n           * Use this as an opportunity to perform preparation before an update occurs.\n           *\n           * NOTE: You **cannot** use `this.setState()` in this method.\n           *\n           * @param {object} nextProps\n           * @param {?object} nextState\n           * @param {?object} nextContext\n           * @param {ReactReconcileTransaction} transaction\n           * @optional\n           */\n          componentWillUpdate: 'DEFINE_MANY',\n\n          /**\n           * Invoked when the component's DOM representation has been updated.\n           *\n           * Use this as an opportunity to operate on the DOM when the component has\n           * been updated.\n           *\n           * @param {object} prevProps\n           * @param {?object} prevState\n           * @param {?object} prevContext\n           * @param {DOMElement} rootNode DOM element representing the component.\n           * @optional\n           */\n          componentDidUpdate: 'DEFINE_MANY',\n\n          /**\n           * Invoked when the component is about to be removed from its parent and have\n           * its DOM representation destroyed.\n           *\n           * Use this as an opportunity to deallocate any external resources.\n           *\n           * NOTE: There is no `componentDidUnmount` since your component will have been\n           * destroyed by that point.\n           *\n           * @optional\n           */\n          componentWillUnmount: 'DEFINE_MANY',\n\n          /**\n           * Replacement for (deprecated) `componentWillMount`.\n           *\n           * @optional\n           */\n          UNSAFE_componentWillMount: 'DEFINE_MANY',\n\n          /**\n           * Replacement for (deprecated) `componentWillReceiveProps`.\n           *\n           * @optional\n           */\n          UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',\n\n          /**\n           * Replacement for (deprecated) `componentWillUpdate`.\n           *\n           * @optional\n           */\n          UNSAFE_componentWillUpdate: 'DEFINE_MANY',\n          // ==== Advanced methods ====\n\n          /**\n           * Updates the component's currently mounted DOM representation.\n           *\n           * By default, this implements React's rendering and reconciliation algorithm.\n           * Sophisticated clients may wish to override this.\n           *\n           * @param {ReactReconcileTransaction} transaction\n           * @internal\n           * @overridable\n           */\n          updateComponent: 'OVERRIDE_BASE'\n        };\n        /**\n         * Similar to ReactClassInterface but for static methods.\n         */\n\n        var ReactClassStaticInterface = {\n          /**\n           * This method is invoked after a component is instantiated and when it\n           * receives new props. Return an object to update state in response to\n           * prop changes. Return null to indicate no change to state.\n           *\n           * If an object is returned, its keys will be merged into the existing state.\n           *\n           * @return {object || null}\n           * @optional\n           */\n          getDerivedStateFromProps: 'DEFINE_MANY_MERGED'\n        };\n        /**\n         * Mapping from class specification keys to special processing functions.\n         *\n         * Although these are declared like instance properties in the specification\n         * when defining classes using `React.createClass`, they are actually static\n         * and are accessible on the constructor instead of the prototype. Despite\n         * being static, they must be defined outside of the \"statics\" key under\n         * which all other static methods are defined.\n         */\n\n        var RESERVED_SPEC_KEYS = {\n          displayName: function displayName(Constructor, _displayName) {\n            Constructor.displayName = _displayName;\n          },\n          mixins: function mixins(Constructor, _mixins) {\n            if (_mixins) {\n              for (var i = 0; i < _mixins.length; i++) {\n                mixSpecIntoComponent(Constructor, _mixins[i]);\n              }\n            }\n          },\n          childContextTypes: function childContextTypes(Constructor, _childContextTypes) {\n            if (false) {}\n\n            Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);\n          },\n          contextTypes: function contextTypes(Constructor, _contextTypes) {\n            if (false) {}\n\n            Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);\n          },\n\n          /**\n           * Special case getDefaultProps which should move into statics but requires\n           * automatic merging.\n           */\n          getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {\n            if (Constructor.getDefaultProps) {\n              Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);\n            } else {\n              Constructor.getDefaultProps = _getDefaultProps;\n            }\n          },\n          propTypes: function propTypes(Constructor, _propTypes) {\n            if (false) {}\n\n            Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);\n          },\n          statics: function statics(Constructor, _statics) {\n            mixStaticSpecIntoComponent(Constructor, _statics);\n          },\n          autobind: function autobind() {}\n        };\n\n        function validateTypeDef(Constructor, typeDef, location) {\n          for (var propName in typeDef) {\n            if (typeDef.hasOwnProperty(propName)) {\n              // use a warning instead of an _invariant so components\n              // don't show up in prod but only in __DEV__\n              if (false) {}\n            }\n          }\n        }\n\n        function validateMethodOverride(isAlreadyDefined, name) {\n          var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null; // Disallow overriding of base class methods unless explicitly allowed.\n\n          if (ReactClassMixin.hasOwnProperty(name)) {\n            _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name);\n          } // Disallow defining methods more than once unless explicitly allowed.\n\n\n          if (isAlreadyDefined) {\n            _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name);\n          }\n        }\n        /**\n         * Mixin helper which handles policy validation and reserved\n         * specification keys when building React classes.\n         */\n\n\n        function mixSpecIntoComponent(Constructor, spec) {\n          if (!spec) {\n            if (false) { var isMixinValid, typeofSpec; }\n\n            return;\n          }\n\n          _invariant(typeof spec !== 'function', \"ReactClass: You're attempting to \" + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.');\n\n          _invariant(!isValidElement(spec), \"ReactClass: You're attempting to \" + 'use a component as a mixin. Instead, just use a regular object.');\n\n          var proto = Constructor.prototype;\n          var autoBindPairs = proto.__reactAutoBindPairs; // By handling mixins before any other properties, we ensure the same\n          // chaining order is applied to methods with DEFINE_MANY policy, whether\n          // mixins are listed before or after these methods in the spec.\n\n          if (spec.hasOwnProperty(MIXINS_KEY)) {\n            RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n          }\n\n          for (var name in spec) {\n            if (!spec.hasOwnProperty(name)) {\n              continue;\n            }\n\n            if (name === MIXINS_KEY) {\n              // We have already handled mixins in a special case above.\n              continue;\n            }\n\n            var property = spec[name];\n            var isAlreadyDefined = proto.hasOwnProperty(name);\n            validateMethodOverride(isAlreadyDefined, name);\n\n            if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n              RESERVED_SPEC_KEYS[name](Constructor, property);\n            } else {\n              // Setup methods on prototype:\n              // The following member methods should not be automatically bound:\n              // 1. Expected ReactClass methods (in the \"interface\").\n              // 2. Overridden methods (that were mixed in).\n              var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n              var isFunction = typeof property === 'function';\n              var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;\n\n              if (shouldAutoBind) {\n                autoBindPairs.push(name, property);\n                proto[name] = property;\n              } else {\n                if (isAlreadyDefined) {\n                  var specPolicy = ReactClassInterface[name]; // These cases should already be caught by validateMethodOverride.\n\n                  _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name); // For methods which are defined more than once, call the existing\n                  // methods before calling the new property, merging if appropriate.\n\n\n                  if (specPolicy === 'DEFINE_MANY_MERGED') {\n                    proto[name] = createMergedResultFunction(proto[name], property);\n                  } else if (specPolicy === 'DEFINE_MANY') {\n                    proto[name] = createChainedFunction(proto[name], property);\n                  }\n                } else {\n                  proto[name] = property;\n\n                  if (false) {}\n                }\n              }\n            }\n          }\n        }\n\n        function mixStaticSpecIntoComponent(Constructor, statics) {\n          if (!statics) {\n            return;\n          }\n\n          for (var name in statics) {\n            var property = statics[name];\n\n            if (!statics.hasOwnProperty(name)) {\n              continue;\n            }\n\n            var isReserved = (name in RESERVED_SPEC_KEYS);\n\n            _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name);\n\n            var isAlreadyDefined = (name in Constructor);\n\n            if (isAlreadyDefined) {\n              var specPolicy = ReactClassStaticInterface.hasOwnProperty(name) ? ReactClassStaticInterface[name] : null;\n\n              _invariant(specPolicy === 'DEFINE_MANY_MERGED', 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name);\n\n              Constructor[name] = createMergedResultFunction(Constructor[name], property);\n              return;\n            }\n\n            Constructor[name] = property;\n          }\n        }\n        /**\n         * Merge two objects, but throw if both contain the same key.\n         *\n         * @param {object} one The first object, which is mutated.\n         * @param {object} two The second object\n         * @return {object} one after it has been mutated to contain everything in two.\n         */\n\n\n        function mergeIntoWithNoDuplicateKeys(one, two) {\n          _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');\n\n          for (var key in two) {\n            if (two.hasOwnProperty(key)) {\n              _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key);\n\n              one[key] = two[key];\n            }\n          }\n\n          return one;\n        }\n        /**\n         * Creates a function that invokes two functions and merges their return values.\n         *\n         * @param {function} one Function to invoke first.\n         * @param {function} two Function to invoke second.\n         * @return {function} Function that invokes the two argument functions.\n         * @private\n         */\n\n\n        function createMergedResultFunction(one, two) {\n          return function mergedResult() {\n            var a = one.apply(this, arguments);\n            var b = two.apply(this, arguments);\n\n            if (a == null) {\n              return b;\n            } else if (b == null) {\n              return a;\n            }\n\n            var c = {};\n            mergeIntoWithNoDuplicateKeys(c, a);\n            mergeIntoWithNoDuplicateKeys(c, b);\n            return c;\n          };\n        }\n        /**\n         * Creates a function that invokes two functions and ignores their return vales.\n         *\n         * @param {function} one Function to invoke first.\n         * @param {function} two Function to invoke second.\n         * @return {function} Function that invokes the two argument functions.\n         * @private\n         */\n\n\n        function createChainedFunction(one, two) {\n          return function chainedFunction() {\n            one.apply(this, arguments);\n            two.apply(this, arguments);\n          };\n        }\n        /**\n         * Binds a method to the component.\n         *\n         * @param {object} component Component whose method is going to be bound.\n         * @param {function} method Method to be bound.\n         * @return {function} The bound method.\n         */\n\n\n        function bindAutoBindMethod(component, method) {\n          var boundMethod = method.bind(component);\n\n          if (false) { var _bind, componentName; }\n\n          return boundMethod;\n        }\n        /**\n         * Binds all auto-bound methods in a component.\n         *\n         * @param {object} component Component whose method is going to be bound.\n         */\n\n\n        function bindAutoBindMethods(component) {\n          var pairs = component.__reactAutoBindPairs;\n\n          for (var i = 0; i < pairs.length; i += 2) {\n            var autoBindKey = pairs[i];\n            var method = pairs[i + 1];\n            component[autoBindKey] = bindAutoBindMethod(component, method);\n          }\n        }\n\n        var IsMountedPreMixin = {\n          componentDidMount: function componentDidMount() {\n            this.__isMounted = true;\n          }\n        };\n        var IsMountedPostMixin = {\n          componentWillUnmount: function componentWillUnmount() {\n            this.__isMounted = false;\n          }\n        };\n        /**\n         * Add more to the ReactClass base class. These are all legacy features and\n         * therefore not already part of the modern ReactComponent.\n         */\n\n        var ReactClassMixin = {\n          /**\n           * TODO: This will be deprecated because state should always keep a consistent\n           * type signature and the only use case for this, is to avoid that.\n           */\n          replaceState: function replaceState(newState, callback) {\n            this.updater.enqueueReplaceState(this, newState, callback);\n          },\n\n          /**\n           * Checks whether or not this composite component is mounted.\n           * @return {boolean} True if mounted, false otherwise.\n           * @protected\n           * @final\n           */\n          isMounted: function isMounted() {\n            if (false) {}\n\n            return !!this.__isMounted;\n          }\n        };\n\n        var ReactClassComponent = function ReactClassComponent() {};\n\n        _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);\n        /**\n         * Creates a composite component class given a class specification.\n         * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n         *\n         * @param {object} spec Class specification (which must define `render`).\n         * @return {function} Component constructor function.\n         * @public\n         */\n\n\n        function createClass(spec) {\n          // To keep our warnings more understandable, we'll use a little hack here to\n          // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\n          // unnecessarily identify a class without displayName as 'Constructor'.\n          var Constructor = identity(function (props, context, updater) {\n            // This constructor gets overridden by mocks. The argument is used\n            // by mocks to assert on what gets mounted.\n            if (false) {} // Wire up auto-binding\n\n\n            if (this.__reactAutoBindPairs.length) {\n              bindAutoBindMethods(this);\n            }\n\n            this.props = props;\n            this.context = context;\n            this.refs = emptyObject;\n            this.updater = updater || ReactNoopUpdateQueue;\n            this.state = null; // ReactClasses doesn't have constructors. Instead, they use the\n            // getInitialState and componentWillMount methods for initialization.\n\n            var initialState = this.getInitialState ? this.getInitialState() : null;\n\n            if (false) {}\n\n            _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');\n\n            this.state = initialState;\n          });\n          Constructor.prototype = new ReactClassComponent();\n          Constructor.prototype.constructor = Constructor;\n          Constructor.prototype.__reactAutoBindPairs = [];\n          injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n          mixSpecIntoComponent(Constructor, IsMountedPreMixin);\n          mixSpecIntoComponent(Constructor, spec);\n          mixSpecIntoComponent(Constructor, IsMountedPostMixin); // Initialize the defaultProps property after all mixins have been merged.\n\n          if (Constructor.getDefaultProps) {\n            Constructor.defaultProps = Constructor.getDefaultProps();\n          }\n\n          if (false) {}\n\n          _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');\n\n          if (false) {} // Reduce time spent doing lookups by setting these on the prototype.\n\n\n          for (var methodName in ReactClassInterface) {\n            if (!Constructor.prototype[methodName]) {\n              Constructor.prototype[methodName] = null;\n            }\n          }\n\n          return Constructor;\n        }\n\n        return createClass;\n      }\n\n      module.exports = factory;\n      /***/\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports) {\n      /*\n      object-assign\n      (c) Sindre Sorhus\n      @license MIT\n      */\n      'use strict';\n      /* eslint-disable no-unused-vars */\n\n      var getOwnPropertySymbols = Object.getOwnPropertySymbols;\n      var hasOwnProperty = Object.prototype.hasOwnProperty;\n      var propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\n      function toObject(val) {\n        if (val === null || val === undefined) {\n          throw new TypeError('Object.assign cannot be called with null or undefined');\n        }\n\n        return Object(val);\n      }\n\n      function shouldUseNative() {\n        try {\n          if (!Object.assign) {\n            return false;\n          } // Detect buggy property enumeration order in older V8 versions.\n          // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\n\n          var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\n          test1[5] = 'de';\n\n          if (Object.getOwnPropertyNames(test1)[0] === '5') {\n            return false;\n          } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n          var test2 = {};\n\n          for (var i = 0; i < 10; i++) {\n            test2['_' + String.fromCharCode(i)] = i;\n          }\n\n          var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n            return test2[n];\n          });\n\n          if (order2.join('') !== '0123456789') {\n            return false;\n          } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n          var test3 = {};\n          'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n            test3[letter] = letter;\n          });\n\n          if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n            return false;\n          }\n\n          return true;\n        } catch (err) {\n          // We don't expect any of the above to throw, but better to be safe.\n          return false;\n        }\n      }\n\n      module.exports = shouldUseNative() ? Object.assign : function (target, source) {\n        var from;\n        var to = toObject(target);\n        var symbols;\n\n        for (var s = 1; s < arguments.length; s++) {\n          from = Object(arguments[s]);\n\n          for (var key in from) {\n            if (hasOwnProperty.call(from, key)) {\n              to[key] = from[key];\n            }\n          }\n\n          if (getOwnPropertySymbols) {\n            symbols = getOwnPropertySymbols(from);\n\n            for (var i = 0; i < symbols.length; i++) {\n              if (propIsEnumerable.call(from, symbols[i])) {\n                to[symbols[i]] = from[symbols[i]];\n              }\n            }\n          }\n        }\n\n        return to;\n      };\n      /***/\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports) {\n      /**\n       * Copyright (c) 2013-present, Facebook, Inc.\n       *\n       * This source code is licensed under the MIT license found in the\n       * LICENSE file in the root directory of this source tree.\n       *\n       */\n      'use strict';\n\n      var emptyObject = {};\n\n      if (false) {}\n\n      module.exports = emptyObject;\n      /***/\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports) {\n      /**\n       * Copyright (c) 2013-present, Facebook, Inc.\n       *\n       * This source code is licensed under the MIT license found in the\n       * LICENSE file in the root directory of this source tree.\n       *\n       */\n      'use strict';\n      /**\n       * Use invariant() to assert state which your program assumes to be true.\n       *\n       * Provide sprintf-style format (only %s is supported) and arguments\n       * to provide information about what broke and what you were\n       * expecting.\n       *\n       * The invariant message will be stripped in production, but the invariant\n       * will remain to ensure logic does not differ in production.\n       */\n\n      var validateFormat = function validateFormat(format) {};\n\n      if (false) {}\n\n      function invariant(condition, format, a, b, c, d, e, f) {\n        validateFormat(format);\n\n        if (!condition) {\n          var error;\n\n          if (format === undefined) {\n            error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n          } else {\n            var args = [a, b, c, d, e, f];\n            var argIndex = 0;\n            error = new Error(format.replace(/%s/g, function () {\n              return args[argIndex++];\n            }));\n            error.name = 'Invariant Violation';\n          }\n\n          error.framesToPop = 1; // we don't care about invariant's own frame\n\n          throw error;\n        }\n      }\n\n      module.exports = invariant;\n      /***/\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n       * Copyright (c) 2014-present, Facebook, Inc.\n       *\n       * This source code is licensed under the MIT license found in the\n       * LICENSE file in the root directory of this source tree.\n       *\n       */\n      'use strict';\n\n      var emptyFunction = __webpack_require__(8);\n      /**\n       * Similar to invariant but only logs a warning if the condition is not met.\n       * This can be used to log issues in development environments in critical\n       * paths. Removing the logging code for production environments will keep the\n       * same logic and follow the same code paths.\n       */\n\n\n      var warning = emptyFunction;\n\n      if (false) { var printWarning; }\n\n      module.exports = warning;\n      /***/\n    },\n    /* 8 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n      /**\n       * Copyright (c) 2013-present, Facebook, Inc.\n       *\n       * This source code is licensed under the MIT license found in the\n       * LICENSE file in the root directory of this source tree.\n       *\n       * \n       */\n\n      function makeEmptyFunction(arg) {\n        return function () {\n          return arg;\n        };\n      }\n      /**\n       * This function accepts and discards inputs; it has no side effects. This is\n       * primarily useful idiomatically for overridable function endpoints which\n       * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n       */\n\n\n      var emptyFunction = function emptyFunction() {};\n\n      emptyFunction.thatReturns = makeEmptyFunction;\n      emptyFunction.thatReturnsFalse = makeEmptyFunction(false);\n      emptyFunction.thatReturnsTrue = makeEmptyFunction(true);\n      emptyFunction.thatReturnsNull = makeEmptyFunction(null);\n\n      emptyFunction.thatReturnsThis = function () {\n        return this;\n      };\n\n      emptyFunction.thatReturnsArgument = function (arg) {\n        return arg;\n      };\n\n      module.exports = emptyFunction;\n      /***/\n    },\n    /* 9 */\n\n    /***/\n    function (module, exports) {\n      'use strict';\n\n      var NumeralFormatter = function NumeralFormatter(numeralDecimalMark, numeralIntegerScale, numeralDecimalScale, numeralThousandsGroupStyle, numeralPositiveOnly, stripLeadingZeroes, prefix, signBeforePrefix, tailPrefix, delimiter) {\n        var owner = this;\n        owner.numeralDecimalMark = numeralDecimalMark || '.';\n        owner.numeralIntegerScale = numeralIntegerScale > 0 ? numeralIntegerScale : 0;\n        owner.numeralDecimalScale = numeralDecimalScale >= 0 ? numeralDecimalScale : 2;\n        owner.numeralThousandsGroupStyle = numeralThousandsGroupStyle || NumeralFormatter.groupStyle.thousand;\n        owner.numeralPositiveOnly = !!numeralPositiveOnly;\n        owner.stripLeadingZeroes = stripLeadingZeroes !== false;\n        owner.prefix = prefix || prefix === '' ? prefix : '';\n        owner.signBeforePrefix = !!signBeforePrefix;\n        owner.tailPrefix = !!tailPrefix;\n        owner.delimiter = delimiter || delimiter === '' ? delimiter : ',';\n        owner.delimiterRE = delimiter ? new RegExp('\\\\' + delimiter, 'g') : '';\n      };\n\n      NumeralFormatter.groupStyle = {\n        thousand: 'thousand',\n        lakh: 'lakh',\n        wan: 'wan',\n        none: 'none'\n      };\n      NumeralFormatter.prototype = {\n        getRawValue: function getRawValue(value) {\n          return value.replace(this.delimiterRE, '').replace(this.numeralDecimalMark, '.');\n        },\n        format: function format(value) {\n          var owner = this,\n              parts,\n              partSign,\n              partSignAndPrefix,\n              partInteger,\n              partDecimal = ''; // strip alphabet letters\n\n          value = value.replace(/[A-Za-z]/g, '') // replace the first decimal mark with reserved placeholder\n          .replace(owner.numeralDecimalMark, 'M') // strip non numeric letters except minus and \"M\"\n          // this is to ensure prefix has been stripped\n          .replace(/[^\\dM-]/g, '') // replace the leading minus with reserved placeholder\n          .replace(/^\\-/, 'N') // strip the other minus sign (if present)\n          .replace(/\\-/g, '') // replace the minus sign (if present)\n          .replace('N', owner.numeralPositiveOnly ? '' : '-') // replace decimal mark\n          .replace('M', owner.numeralDecimalMark); // strip any leading zeros\n\n          if (owner.stripLeadingZeroes) {\n            value = value.replace(/^(-)?0+(?=\\d)/, '$1');\n          }\n\n          partSign = value.slice(0, 1) === '-' ? '-' : '';\n\n          if (typeof owner.prefix != 'undefined') {\n            if (owner.signBeforePrefix) {\n              partSignAndPrefix = partSign + owner.prefix;\n            } else {\n              partSignAndPrefix = owner.prefix + partSign;\n            }\n          } else {\n            partSignAndPrefix = partSign;\n          }\n\n          partInteger = value;\n\n          if (value.indexOf(owner.numeralDecimalMark) >= 0) {\n            parts = value.split(owner.numeralDecimalMark);\n            partInteger = parts[0];\n            partDecimal = owner.numeralDecimalMark + parts[1].slice(0, owner.numeralDecimalScale);\n          }\n\n          if (partSign === '-') {\n            partInteger = partInteger.slice(1);\n          }\n\n          if (owner.numeralIntegerScale > 0) {\n            partInteger = partInteger.slice(0, owner.numeralIntegerScale);\n          }\n\n          switch (owner.numeralThousandsGroupStyle) {\n            case NumeralFormatter.groupStyle.lakh:\n              partInteger = partInteger.replace(/(\\d)(?=(\\d\\d)+\\d$)/g, '$1' + owner.delimiter);\n              break;\n\n            case NumeralFormatter.groupStyle.wan:\n              partInteger = partInteger.replace(/(\\d)(?=(\\d{4})+$)/g, '$1' + owner.delimiter);\n              break;\n\n            case NumeralFormatter.groupStyle.thousand:\n              partInteger = partInteger.replace(/(\\d)(?=(\\d{3})+$)/g, '$1' + owner.delimiter);\n              break;\n          }\n\n          if (owner.tailPrefix) {\n            return partSign + partInteger.toString() + (owner.numeralDecimalScale > 0 ? partDecimal.toString() : '') + owner.prefix;\n          }\n\n          return partSignAndPrefix + partInteger.toString() + (owner.numeralDecimalScale > 0 ? partDecimal.toString() : '');\n        }\n      };\n      module.exports = NumeralFormatter;\n      /***/\n    },\n    /* 10 */\n\n    /***/\n    function (module, exports) {\n      'use strict';\n\n      var DateFormatter = function DateFormatter(datePattern, dateMin, dateMax) {\n        var owner = this;\n        owner.date = [];\n        owner.blocks = [];\n        owner.datePattern = datePattern;\n        owner.dateMin = dateMin.split('-').reverse().map(function (x) {\n          return parseInt(x, 10);\n        });\n        if (owner.dateMin.length === 2) owner.dateMin.unshift(0);\n        owner.dateMax = dateMax.split('-').reverse().map(function (x) {\n          return parseInt(x, 10);\n        });\n        if (owner.dateMax.length === 2) owner.dateMax.unshift(0);\n        owner.initBlocks();\n      };\n\n      DateFormatter.prototype = {\n        initBlocks: function initBlocks() {\n          var owner = this;\n          owner.datePattern.forEach(function (value) {\n            if (value === 'Y') {\n              owner.blocks.push(4);\n            } else {\n              owner.blocks.push(2);\n            }\n          });\n        },\n        getISOFormatDate: function getISOFormatDate() {\n          var owner = this,\n              date = owner.date;\n          return date[2] ? date[2] + '-' + owner.addLeadingZero(date[1]) + '-' + owner.addLeadingZero(date[0]) : '';\n        },\n        getBlocks: function getBlocks() {\n          return this.blocks;\n        },\n        getValidatedDate: function getValidatedDate(value) {\n          var owner = this,\n              result = '';\n          value = value.replace(/[^\\d]/g, '');\n          owner.blocks.forEach(function (length, index) {\n            if (value.length > 0) {\n              var sub = value.slice(0, length),\n                  sub0 = sub.slice(0, 1),\n                  rest = value.slice(length);\n\n              switch (owner.datePattern[index]) {\n                case 'd':\n                  if (sub === '00') {\n                    sub = '01';\n                  } else if (parseInt(sub0, 10) > 3) {\n                    sub = '0' + sub0;\n                  } else if (parseInt(sub, 10) > 31) {\n                    sub = '31';\n                  }\n\n                  break;\n\n                case 'm':\n                  if (sub === '00') {\n                    sub = '01';\n                  } else if (parseInt(sub0, 10) > 1) {\n                    sub = '0' + sub0;\n                  } else if (parseInt(sub, 10) > 12) {\n                    sub = '12';\n                  }\n\n                  break;\n              }\n\n              result += sub; // update remaining string\n\n              value = rest;\n            }\n          });\n          return this.getFixedDateString(result);\n        },\n        getFixedDateString: function getFixedDateString(value) {\n          var owner = this,\n              datePattern = owner.datePattern,\n              date = [],\n              dayIndex = 0,\n              monthIndex = 0,\n              yearIndex = 0,\n              dayStartIndex = 0,\n              monthStartIndex = 0,\n              yearStartIndex = 0,\n              day,\n              month,\n              year,\n              fullYearDone = false; // mm-dd || dd-mm\n\n          if (value.length === 4 && datePattern[0].toLowerCase() !== 'y' && datePattern[1].toLowerCase() !== 'y') {\n            dayStartIndex = datePattern[0] === 'd' ? 0 : 2;\n            monthStartIndex = 2 - dayStartIndex;\n            day = parseInt(value.slice(dayStartIndex, dayStartIndex + 2), 10);\n            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);\n            date = this.getFixedDate(day, month, 0);\n          } // yyyy-mm-dd || yyyy-dd-mm || mm-dd-yyyy || dd-mm-yyyy || dd-yyyy-mm || mm-yyyy-dd\n\n\n          if (value.length === 8) {\n            datePattern.forEach(function (type, index) {\n              switch (type) {\n                case 'd':\n                  dayIndex = index;\n                  break;\n\n                case 'm':\n                  monthIndex = index;\n                  break;\n\n                default:\n                  yearIndex = index;\n                  break;\n              }\n            });\n            yearStartIndex = yearIndex * 2;\n            dayStartIndex = dayIndex <= yearIndex ? dayIndex * 2 : dayIndex * 2 + 2;\n            monthStartIndex = monthIndex <= yearIndex ? monthIndex * 2 : monthIndex * 2 + 2;\n            day = parseInt(value.slice(dayStartIndex, dayStartIndex + 2), 10);\n            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);\n            year = parseInt(value.slice(yearStartIndex, yearStartIndex + 4), 10);\n            fullYearDone = value.slice(yearStartIndex, yearStartIndex + 4).length === 4;\n            date = this.getFixedDate(day, month, year);\n          } // mm-yy || yy-mm\n\n\n          if (value.length === 4 && (datePattern[0] === 'y' || datePattern[1] === 'y')) {\n            monthStartIndex = datePattern[0] === 'm' ? 0 : 2;\n            yearStartIndex = 2 - monthStartIndex;\n            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);\n            year = parseInt(value.slice(yearStartIndex, yearStartIndex + 2), 10);\n            fullYearDone = value.slice(yearStartIndex, yearStartIndex + 2).length === 2;\n            date = [0, month, year];\n          } // mm-yyyy || yyyy-mm\n\n\n          if (value.length === 6 && (datePattern[0] === 'Y' || datePattern[1] === 'Y')) {\n            monthStartIndex = datePattern[0] === 'm' ? 0 : 4;\n            yearStartIndex = 2 - 0.5 * monthStartIndex;\n            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);\n            year = parseInt(value.slice(yearStartIndex, yearStartIndex + 4), 10);\n            fullYearDone = value.slice(yearStartIndex, yearStartIndex + 4).length === 4;\n            date = [0, month, year];\n          }\n\n          date = owner.getRangeFixedDate(date);\n          owner.date = date;\n          var result = date.length === 0 ? value : datePattern.reduce(function (previous, current) {\n            switch (current) {\n              case 'd':\n                return previous + (date[0] === 0 ? '' : owner.addLeadingZero(date[0]));\n\n              case 'm':\n                return previous + (date[1] === 0 ? '' : owner.addLeadingZero(date[1]));\n\n              case 'y':\n                return previous + (fullYearDone ? owner.addLeadingZeroForYear(date[2], false) : '');\n\n              case 'Y':\n                return previous + (fullYearDone ? owner.addLeadingZeroForYear(date[2], true) : '');\n            }\n          }, '');\n          return result;\n        },\n        getRangeFixedDate: function getRangeFixedDate(date) {\n          var owner = this,\n              datePattern = owner.datePattern,\n              dateMin = owner.dateMin || [],\n              dateMax = owner.dateMax || [];\n          if (!date.length || dateMin.length < 3 && dateMax.length < 3) return date;\n          if (datePattern.find(function (x) {\n            return x.toLowerCase() === 'y';\n          }) && date[2] === 0) return date;\n          if (dateMax.length && (dateMax[2] < date[2] || dateMax[2] === date[2] && (dateMax[1] < date[1] || dateMax[1] === date[1] && dateMax[0] < date[0]))) return dateMax;\n          if (dateMin.length && (dateMin[2] > date[2] || dateMin[2] === date[2] && (dateMin[1] > date[1] || dateMin[1] === date[1] && dateMin[0] > date[0]))) return dateMin;\n          return date;\n        },\n        getFixedDate: function getFixedDate(day, month, year) {\n          day = Math.min(day, 31);\n          month = Math.min(month, 12);\n          year = parseInt(year || 0, 10);\n\n          if (month < 7 && month % 2 === 0 || month > 8 && month % 2 === 1) {\n            day = Math.min(day, month === 2 ? this.isLeapYear(year) ? 29 : 28 : 30);\n          }\n\n          return [day, month, year];\n        },\n        isLeapYear: function isLeapYear(year) {\n          return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n        },\n        addLeadingZero: function addLeadingZero(number) {\n          return (number < 10 ? '0' : '') + number;\n        },\n        addLeadingZeroForYear: function addLeadingZeroForYear(number, fullYearMode) {\n          if (fullYearMode) {\n            return (number < 10 ? '000' : number < 100 ? '00' : number < 1000 ? '0' : '') + number;\n          }\n\n          return (number < 10 ? '0' : '') + number;\n        }\n      };\n      module.exports = DateFormatter;\n      /***/\n    },\n    /* 11 */\n\n    /***/\n    function (module, exports) {\n      'use strict';\n\n      var TimeFormatter = function TimeFormatter(timePattern, timeFormat) {\n        var owner = this;\n        owner.time = [];\n        owner.blocks = [];\n        owner.timePattern = timePattern;\n        owner.timeFormat = timeFormat;\n        owner.initBlocks();\n      };\n\n      TimeFormatter.prototype = {\n        initBlocks: function initBlocks() {\n          var owner = this;\n          owner.timePattern.forEach(function () {\n            owner.blocks.push(2);\n          });\n        },\n        getISOFormatTime: function getISOFormatTime() {\n          var owner = this,\n              time = owner.time;\n          return time[2] ? owner.addLeadingZero(time[0]) + ':' + owner.addLeadingZero(time[1]) + ':' + owner.addLeadingZero(time[2]) : '';\n        },\n        getBlocks: function getBlocks() {\n          return this.blocks;\n        },\n        getTimeFormatOptions: function getTimeFormatOptions() {\n          var owner = this;\n\n          if (String(owner.timeFormat) === '12') {\n            return {\n              maxHourFirstDigit: 1,\n              maxHours: 12,\n              maxMinutesFirstDigit: 5,\n              maxMinutes: 60\n            };\n          }\n\n          return {\n            maxHourFirstDigit: 2,\n            maxHours: 23,\n            maxMinutesFirstDigit: 5,\n            maxMinutes: 60\n          };\n        },\n        getValidatedTime: function getValidatedTime(value) {\n          var owner = this,\n              result = '';\n          value = value.replace(/[^\\d]/g, '');\n          var timeFormatOptions = owner.getTimeFormatOptions();\n          owner.blocks.forEach(function (length, index) {\n            if (value.length > 0) {\n              var sub = value.slice(0, length),\n                  sub0 = sub.slice(0, 1),\n                  rest = value.slice(length);\n\n              switch (owner.timePattern[index]) {\n                case 'h':\n                  if (parseInt(sub0, 10) > timeFormatOptions.maxHourFirstDigit) {\n                    sub = '0' + sub0;\n                  } else if (parseInt(sub, 10) > timeFormatOptions.maxHours) {\n                    sub = timeFormatOptions.maxHours + '';\n                  }\n\n                  break;\n\n                case 'm':\n                case 's':\n                  if (parseInt(sub0, 10) > timeFormatOptions.maxMinutesFirstDigit) {\n                    sub = '0' + sub0;\n                  } else if (parseInt(sub, 10) > timeFormatOptions.maxMinutes) {\n                    sub = timeFormatOptions.maxMinutes + '';\n                  }\n\n                  break;\n              }\n\n              result += sub; // update remaining string\n\n              value = rest;\n            }\n          });\n          return this.getFixedTimeString(result);\n        },\n        getFixedTimeString: function getFixedTimeString(value) {\n          var owner = this,\n              timePattern = owner.timePattern,\n              time = [],\n              secondIndex = 0,\n              minuteIndex = 0,\n              hourIndex = 0,\n              secondStartIndex = 0,\n              minuteStartIndex = 0,\n              hourStartIndex = 0,\n              second,\n              minute,\n              hour;\n\n          if (value.length === 6) {\n            timePattern.forEach(function (type, index) {\n              switch (type) {\n                case 's':\n                  secondIndex = index * 2;\n                  break;\n\n                case 'm':\n                  minuteIndex = index * 2;\n                  break;\n\n                case 'h':\n                  hourIndex = index * 2;\n                  break;\n              }\n            });\n            hourStartIndex = hourIndex;\n            minuteStartIndex = minuteIndex;\n            secondStartIndex = secondIndex;\n            second = parseInt(value.slice(secondStartIndex, secondStartIndex + 2), 10);\n            minute = parseInt(value.slice(minuteStartIndex, minuteStartIndex + 2), 10);\n            hour = parseInt(value.slice(hourStartIndex, hourStartIndex + 2), 10);\n            time = this.getFixedTime(hour, minute, second);\n          }\n\n          if (value.length === 4 && owner.timePattern.indexOf('s') < 0) {\n            timePattern.forEach(function (type, index) {\n              switch (type) {\n                case 'm':\n                  minuteIndex = index * 2;\n                  break;\n\n                case 'h':\n                  hourIndex = index * 2;\n                  break;\n              }\n            });\n            hourStartIndex = hourIndex;\n            minuteStartIndex = minuteIndex;\n            second = 0;\n            minute = parseInt(value.slice(minuteStartIndex, minuteStartIndex + 2), 10);\n            hour = parseInt(value.slice(hourStartIndex, hourStartIndex + 2), 10);\n            time = this.getFixedTime(hour, minute, second);\n          }\n\n          owner.time = time;\n          return time.length === 0 ? value : timePattern.reduce(function (previous, current) {\n            switch (current) {\n              case 's':\n                return previous + owner.addLeadingZero(time[2]);\n\n              case 'm':\n                return previous + owner.addLeadingZero(time[1]);\n\n              case 'h':\n                return previous + owner.addLeadingZero(time[0]);\n            }\n          }, '');\n        },\n        getFixedTime: function getFixedTime(hour, minute, second) {\n          second = Math.min(parseInt(second || 0, 10), 60);\n          minute = Math.min(minute, 60);\n          hour = Math.min(hour, 60);\n          return [hour, minute, second];\n        },\n        addLeadingZero: function addLeadingZero(number) {\n          return (number < 10 ? '0' : '') + number;\n        }\n      };\n      module.exports = TimeFormatter;\n      /***/\n    },\n    /* 12 */\n\n    /***/\n    function (module, exports) {\n      'use strict';\n\n      var PhoneFormatter = function PhoneFormatter(formatter, delimiter) {\n        var owner = this;\n        owner.delimiter = delimiter || delimiter === '' ? delimiter : ' ';\n        owner.delimiterRE = delimiter ? new RegExp('\\\\' + delimiter, 'g') : '';\n        owner.formatter = formatter;\n      };\n\n      PhoneFormatter.prototype = {\n        setFormatter: function setFormatter(formatter) {\n          this.formatter = formatter;\n        },\n        format: function format(phoneNumber) {\n          var owner = this;\n          owner.formatter.clear(); // only keep number and +\n\n          phoneNumber = phoneNumber.replace(/[^\\d+]/g, ''); // strip non-leading +\n\n          phoneNumber = phoneNumber.replace(/^\\+/, 'B').replace(/\\+/g, '').replace('B', '+'); // strip delimiter\n\n          phoneNumber = phoneNumber.replace(owner.delimiterRE, '');\n          var result = '',\n              current,\n              validated = false;\n\n          for (var i = 0, iMax = phoneNumber.length; i < iMax; i++) {\n            current = owner.formatter.inputDigit(phoneNumber.charAt(i)); // has ()- or space inside\n\n            if (/[\\s()-]/g.test(current)) {\n              result = current;\n              validated = true;\n            } else {\n              if (!validated) {\n                result = current;\n              } // else: over length input\n              // it turns to invalid number again\n\n            }\n          } // strip ()\n          // e.g. US: 7161234567 returns (716) 123-4567\n\n\n          result = result.replace(/[()]/g, ''); // replace library delimiter with user customized delimiter\n\n          result = result.replace(/[\\s-]/g, owner.delimiter);\n          return result;\n        }\n      };\n      module.exports = PhoneFormatter;\n      /***/\n    },\n    /* 13 */\n\n    /***/\n    function (module, exports) {\n      'use strict';\n\n      var CreditCardDetector = {\n        blocks: {\n          uatp: [4, 5, 6],\n          amex: [4, 6, 5],\n          diners: [4, 6, 4],\n          discover: [4, 4, 4, 4],\n          mastercard: [4, 4, 4, 4],\n          dankort: [4, 4, 4, 4],\n          instapayment: [4, 4, 4, 4],\n          jcb15: [4, 6, 5],\n          jcb: [4, 4, 4, 4],\n          maestro: [4, 4, 4, 4],\n          visa: [4, 4, 4, 4],\n          mir: [4, 4, 4, 4],\n          unionPay: [4, 4, 4, 4],\n          general: [4, 4, 4, 4]\n        },\n        re: {\n          // starts with 1; 15 digits, not starts with 1800 (jcb card)\n          uatp: /^(?!1800)1\\d{0,14}/,\n          // starts with 34/37; 15 digits\n          amex: /^3[47]\\d{0,13}/,\n          // starts with 6011/65/644-649; 16 digits\n          discover: /^(?:6011|65\\d{0,2}|64[4-9]\\d?)\\d{0,12}/,\n          // starts with 300-305/309 or 36/38/39; 14 digits\n          diners: /^3(?:0([0-5]|9)|[689]\\d?)\\d{0,11}/,\n          // starts with 51-55/2221–2720; 16 digits\n          mastercard: /^(5[1-5]\\d{0,2}|22[2-9]\\d{0,1}|2[3-7]\\d{0,2})\\d{0,12}/,\n          // starts with 5019/4175/4571; 16 digits\n          dankort: /^(5019|4175|4571)\\d{0,12}/,\n          // starts with 637-639; 16 digits\n          instapayment: /^63[7-9]\\d{0,13}/,\n          // starts with 2131/1800; 15 digits\n          jcb15: /^(?:2131|1800)\\d{0,11}/,\n          // starts with 2131/1800/35; 16 digits\n          jcb: /^(?:35\\d{0,2})\\d{0,12}/,\n          // starts with 50/56-58/6304/67; 16 digits\n          maestro: /^(?:5[0678]\\d{0,2}|6304|67\\d{0,2})\\d{0,12}/,\n          // starts with 22; 16 digits\n          mir: /^220[0-4]\\d{0,12}/,\n          // starts with 4; 16 digits\n          visa: /^4\\d{0,15}/,\n          // starts with 62/81; 16 digits\n          unionPay: /^(62|81)\\d{0,14}/\n        },\n        getStrictBlocks: function getStrictBlocks(block) {\n          var total = block.reduce(function (prev, current) {\n            return prev + current;\n          }, 0);\n          return block.concat(19 - total);\n        },\n        getInfo: function getInfo(value, strictMode) {\n          var blocks = CreditCardDetector.blocks,\n              re = CreditCardDetector.re; // Some credit card can have up to 19 digits number.\n          // Set strictMode to true will remove the 16 max-length restrain,\n          // however, I never found any website validate card number like\n          // this, hence probably you don't want to enable this option.\n\n          strictMode = !!strictMode;\n\n          for (var key in re) {\n            if (re[key].test(value)) {\n              var matchedBlocks = blocks[key];\n              return {\n                type: key,\n                blocks: strictMode ? this.getStrictBlocks(matchedBlocks) : matchedBlocks\n              };\n            }\n          }\n\n          return {\n            type: 'unknown',\n            blocks: strictMode ? this.getStrictBlocks(blocks.general) : blocks.general\n          };\n        }\n      };\n      module.exports = CreditCardDetector;\n      /***/\n    },\n    /* 14 */\n\n    /***/\n    function (module, exports) {\n      'use strict';\n\n      var Util = {\n        noop: function noop() {},\n        strip: function strip(value, re) {\n          return value.replace(re, '');\n        },\n        getPostDelimiter: function getPostDelimiter(value, delimiter, delimiters) {\n          // single delimiter\n          if (delimiters.length === 0) {\n            return value.slice(-delimiter.length) === delimiter ? delimiter : '';\n          } // multiple delimiters\n\n\n          var matchedDelimiter = '';\n          delimiters.forEach(function (current) {\n            if (value.slice(-current.length) === current) {\n              matchedDelimiter = current;\n            }\n          });\n          return matchedDelimiter;\n        },\n        getDelimiterREByDelimiter: function getDelimiterREByDelimiter(delimiter) {\n          return new RegExp(delimiter.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1'), 'g');\n        },\n        getNextCursorPosition: function getNextCursorPosition(prevPos, oldValue, newValue, delimiter, delimiters) {\n          // If cursor was at the end of value, just place it back.\n          // Because new value could contain additional chars.\n          if (oldValue.length === prevPos) {\n            return newValue.length;\n          }\n\n          return prevPos + this.getPositionOffset(prevPos, oldValue, newValue, delimiter, delimiters);\n        },\n        getPositionOffset: function getPositionOffset(prevPos, oldValue, newValue, delimiter, delimiters) {\n          var oldRawValue, newRawValue, lengthOffset;\n          oldRawValue = this.stripDelimiters(oldValue.slice(0, prevPos), delimiter, delimiters);\n          newRawValue = this.stripDelimiters(newValue.slice(0, prevPos), delimiter, delimiters);\n          lengthOffset = oldRawValue.length - newRawValue.length;\n          return lengthOffset !== 0 ? lengthOffset / Math.abs(lengthOffset) : 0;\n        },\n        stripDelimiters: function stripDelimiters(value, delimiter, delimiters) {\n          var owner = this; // single delimiter\n\n          if (delimiters.length === 0) {\n            var delimiterRE = delimiter ? owner.getDelimiterREByDelimiter(delimiter) : '';\n            return value.replace(delimiterRE, '');\n          } // multiple delimiters\n\n\n          delimiters.forEach(function (current) {\n            current.split('').forEach(function (letter) {\n              value = value.replace(owner.getDelimiterREByDelimiter(letter), '');\n            });\n          });\n          return value;\n        },\n        headStr: function headStr(str, length) {\n          return str.slice(0, length);\n        },\n        getMaxLength: function getMaxLength(blocks) {\n          return blocks.reduce(function (previous, current) {\n            return previous + current;\n          }, 0);\n        },\n        // strip prefix\n        // Before type  |   After type    |     Return value\n        // PEFIX-...    |   PEFIX-...     |     ''\n        // PREFIX-123   |   PEFIX-123     |     123\n        // PREFIX-123   |   PREFIX-23     |     23\n        // PREFIX-123   |   PREFIX-1234   |     1234\n        getPrefixStrippedValue: function getPrefixStrippedValue(value, prefix, prefixLength, prevResult, delimiter, delimiters, noImmediatePrefix, tailPrefix, signBeforePrefix) {\n          // No prefix\n          if (prefixLength === 0) {\n            return value;\n          } // Value is prefix\n\n\n          if (value === prefix && value !== '') {\n            return '';\n          }\n\n          if (signBeforePrefix && value.slice(0, 1) == '-') {\n            var prev = prevResult.slice(0, 1) == '-' ? prevResult.slice(1) : prevResult;\n            return '-' + this.getPrefixStrippedValue(value.slice(1), prefix, prefixLength, prev, delimiter, delimiters, noImmediatePrefix, tailPrefix, signBeforePrefix);\n          } // Pre result prefix string does not match pre-defined prefix\n\n\n          if (prevResult.slice(0, prefixLength) !== prefix && !tailPrefix) {\n            // Check if the first time user entered something\n            if (noImmediatePrefix && !prevResult && value) return value;\n            return '';\n          } else if (prevResult.slice(-prefixLength) !== prefix && tailPrefix) {\n            // Check if the first time user entered something\n            if (noImmediatePrefix && !prevResult && value) return value;\n            return '';\n          }\n\n          var prevValue = this.stripDelimiters(prevResult, delimiter, delimiters); // New value has issue, someone typed in between prefix letters\n          // Revert to pre value\n\n          if (value.slice(0, prefixLength) !== prefix && !tailPrefix) {\n            return prevValue.slice(prefixLength);\n          } else if (value.slice(-prefixLength) !== prefix && tailPrefix) {\n            return prevValue.slice(0, -prefixLength - 1);\n          } // No issue, strip prefix for new value\n\n\n          return tailPrefix ? value.slice(0, -prefixLength) : value.slice(prefixLength);\n        },\n        getFirstDiffIndex: function getFirstDiffIndex(prev, current) {\n          var index = 0;\n\n          while (prev.charAt(index) === current.charAt(index)) {\n            if (prev.charAt(index++) === '') {\n              return -1;\n            }\n          }\n\n          return index;\n        },\n        getFormattedValue: function getFormattedValue(value, blocks, blocksLength, delimiter, delimiters, delimiterLazyShow) {\n          var result = '',\n              multipleDelimiters = delimiters.length > 0,\n              currentDelimiter = ''; // no options, normal input\n\n          if (blocksLength === 0) {\n            return value;\n          }\n\n          blocks.forEach(function (length, index) {\n            if (value.length > 0) {\n              var sub = value.slice(0, length),\n                  rest = value.slice(length);\n\n              if (multipleDelimiters) {\n                currentDelimiter = delimiters[delimiterLazyShow ? index - 1 : index] || currentDelimiter;\n              } else {\n                currentDelimiter = delimiter;\n              }\n\n              if (delimiterLazyShow) {\n                if (index > 0) {\n                  result += currentDelimiter;\n                }\n\n                result += sub;\n              } else {\n                result += sub;\n\n                if (sub.length === length && index < blocksLength - 1) {\n                  result += currentDelimiter;\n                }\n              } // update remaining string\n\n\n              value = rest;\n            }\n          });\n          return result;\n        },\n        // move cursor to the end\n        // the first time user focuses on an input with prefix\n        fixPrefixCursor: function fixPrefixCursor(el, prefix, delimiter, delimiters) {\n          if (!el) {\n            return;\n          }\n\n          var val = el.value,\n              appendix = delimiter || delimiters[0] || ' ';\n\n          if (!el.setSelectionRange || !prefix || prefix.length + appendix.length <= val.length) {\n            return;\n          }\n\n          var len = val.length * 2; // set timeout to avoid blink\n\n          setTimeout(function () {\n            el.setSelectionRange(len, len);\n          }, 1);\n        },\n        // Check if input field is fully selected\n        checkFullSelection: function checkFullSelection(value) {\n          try {\n            var selection = window.getSelection() || document.getSelection() || {};\n            return selection.toString().length === value.length;\n          } catch (ex) {// Ignore\n          }\n\n          return false;\n        },\n        setSelection: function setSelection(element, position, doc) {\n          if (element !== this.getActiveElement(doc)) {\n            return;\n          } // cursor is already in the end\n\n\n          if (element && element.value.length <= position) {\n            return;\n          }\n\n          if (element.createTextRange) {\n            var range = element.createTextRange();\n            range.move('character', position);\n            range.select();\n          } else {\n            try {\n              element.setSelectionRange(position, position);\n            } catch (e) {\n              // eslint-disable-next-line\n              console.warn('The input element type does not support selection');\n            }\n          }\n        },\n        getActiveElement: function getActiveElement(parent) {\n          var activeElement = parent.activeElement;\n\n          if (activeElement && activeElement.shadowRoot) {\n            return this.getActiveElement(activeElement.shadowRoot);\n          }\n\n          return activeElement;\n        },\n        isAndroid: function isAndroid() {\n          return navigator && /android/i.test(navigator.userAgent);\n        },\n        // On Android chrome, the keyup and keydown events\n        // always return key code 229 as a composition that\n        // buffers the user’s keystrokes\n        // see https://github.com/nosir/cleave.js/issues/147\n        isAndroidBackspaceKeydown: function isAndroidBackspaceKeydown(lastInputValue, currentInputValue) {\n          if (!this.isAndroid() || !lastInputValue || !currentInputValue) {\n            return false;\n          }\n\n          return currentInputValue === lastInputValue.slice(0, -1);\n        }\n      };\n      module.exports = Util;\n      /***/\n    },\n    /* 15 */\n\n    /***/\n    function (module, exports) {\n      'use strict';\n      /**\n       * Props Assignment\n       *\n       * Separate this, so react module can share the usage\n       */\n\n      var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n\n      var DefaultProperties = {\n        // Maybe change to object-assign\n        // for now just keep it as simple\n        assign: function assign(target, opts) {\n          target = target || {};\n          opts = opts || {}; // credit card\n\n          target.creditCard = !!opts.creditCard;\n          target.creditCardStrictMode = !!opts.creditCardStrictMode;\n          target.creditCardType = '';\n\n          target.onCreditCardTypeChanged = opts.onCreditCardTypeChanged || function () {}; // phone\n\n\n          target.phone = !!opts.phone;\n          target.phoneRegionCode = opts.phoneRegionCode || 'AU';\n          target.phoneFormatter = {}; // time\n\n          target.time = !!opts.time;\n          target.timePattern = opts.timePattern || ['h', 'm', 's'];\n          target.timeFormat = opts.timeFormat || '24';\n          target.timeFormatter = {}; // date\n\n          target.date = !!opts.date;\n          target.datePattern = opts.datePattern || ['d', 'm', 'Y'];\n          target.dateMin = opts.dateMin || '';\n          target.dateMax = opts.dateMax || '';\n          target.dateFormatter = {}; // numeral\n\n          target.numeral = !!opts.numeral;\n          target.numeralIntegerScale = opts.numeralIntegerScale > 0 ? opts.numeralIntegerScale : 0;\n          target.numeralDecimalScale = opts.numeralDecimalScale >= 0 ? opts.numeralDecimalScale : 2;\n          target.numeralDecimalMark = opts.numeralDecimalMark || '.';\n          target.numeralThousandsGroupStyle = opts.numeralThousandsGroupStyle || 'thousand';\n          target.numeralPositiveOnly = !!opts.numeralPositiveOnly;\n          target.stripLeadingZeroes = opts.stripLeadingZeroes !== false;\n          target.signBeforePrefix = !!opts.signBeforePrefix;\n          target.tailPrefix = !!opts.tailPrefix; // others\n\n          target.swapHiddenInput = !!opts.swapHiddenInput;\n          target.numericOnly = target.creditCard || target.date || !!opts.numericOnly;\n          target.uppercase = !!opts.uppercase;\n          target.lowercase = !!opts.lowercase;\n          target.prefix = target.creditCard || target.date ? '' : opts.prefix || '';\n          target.noImmediatePrefix = !!opts.noImmediatePrefix;\n          target.prefixLength = target.prefix.length;\n          target.rawValueTrimPrefix = !!opts.rawValueTrimPrefix;\n          target.copyDelimiter = !!opts.copyDelimiter;\n          target.initValue = opts.initValue !== undefined && opts.initValue !== null ? opts.initValue.toString() : '';\n          target.delimiter = opts.delimiter || opts.delimiter === '' ? opts.delimiter : opts.date ? '/' : opts.time ? ':' : opts.numeral ? ',' : opts.phone ? ' ' : ' ';\n          target.delimiterLength = target.delimiter.length;\n          target.delimiterLazyShow = !!opts.delimiterLazyShow;\n          target.delimiters = opts.delimiters || [];\n          target.blocks = opts.blocks || [];\n          target.blocksLength = target.blocks.length;\n          target.root = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object' && global ? global : window;\n          target.document = opts.document || target.root.document;\n          target.maxLength = 0;\n          target.backspace = false;\n          target.result = '';\n\n          target.onValueChanged = opts.onValueChanged || function () {};\n\n          return target;\n        }\n      };\n      module.exports = DefaultProperties;\n      /***/\n    }\n    /******/\n    ])\n  );\n});\n\n;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(\"yLpj\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///M/dN\n")},cttA:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.reduce.js\nvar es_array_reduce = __webpack_require__("E9XD");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__("rePB");\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__("q1tI");\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js\nvar regenerator = __webpack_require__("o0o1");\nvar regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i["return"] != null) _i["return"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\nvar unsupportedIterableToArray = __webpack_require__("BsWD");\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js\nfunction _nonIterableRest() {\n  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\n\n\n\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || Object(unsupportedIterableToArray["a" /* default */])(arr, i) || _nonIterableRest();\n}\n// EXTERNAL MODULE: ./node_modules/regenerator-runtime/runtime.js\nvar runtime = __webpack_require__("ls82");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\nvar asyncToGenerator = __webpack_require__("HaE+");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 3 modules\nvar toConsumableArray = __webpack_require__("KQm4");\n\n// CONCATENATED MODULE: ./node_modules/react-hook-form/dist/index.esm.js\n\n\n\n\n\n\n\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\nvar isHTMLElement = function isHTMLElement(value) {\n  return value instanceof HTMLElement;\n};\n\nvar EVENTS = {\n  BLUR: \'blur\',\n  CHANGE: \'change\',\n  INPUT: \'input\'\n};\nvar VALIDATION_MODE = {\n  onBlur: \'onBlur\',\n  onChange: \'onChange\',\n  onSubmit: \'onSubmit\',\n  onTouched: \'onTouched\',\n  all: \'all\'\n};\nvar SELECT = \'select\';\nvar UNDEFINED = \'undefined\';\nvar INPUT_VALIDATION_RULES = {\n  max: \'max\',\n  min: \'min\',\n  maxLength: \'maxLength\',\n  minLength: \'minLength\',\n  pattern: \'pattern\',\n  required: \'required\',\n  validate: \'validate\'\n};\n\nfunction attachEventListeners(_ref, shouldAttachChangeEvent, handleChange) {\n  var ref = _ref.ref;\n\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n\nvar isNullOrUndefined = function isNullOrUndefined(value) {\n  return value == null;\n};\n\nvar isObjectType = function isObjectType(value) {\n  return typeof value === \'object\';\n};\n\nvar isObject = function isObject(value) {\n  return !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !(value instanceof Date);\n};\n\nvar isKey = function isKey(value) {\n  return /^\\w*$/.test(value);\n};\n\nvar compact = function compact(value) {\n  return value.filter(Boolean);\n};\n\nvar stringToPath = function stringToPath(input) {\n  return compact(input.replace(/["|\']/g, \'\').replace(/\\[/g, \'.\').replace(/\\]/g, \'\').split(\'.\'));\n};\n\nfunction set(object, path, value) {\n  var index = -1;\n  var tempPath = isKey(path) ? [path] : stringToPath(path);\n  var length = tempPath.length;\n  var lastIndex = length - 1;\n\n  while (++index < length) {\n    var key = tempPath[index];\n    var newValue = value;\n\n    if (index !== lastIndex) {\n      var objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar transformToNestObject = function transformToNestObject(data) {\n  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  for (var key in data) {\n    !isKey(key) ? set(value, key, data[key]) : value[key] = data[key];\n  }\n\n  return value;\n};\n\nvar isUndefined = function isUndefined(val) {\n  return val === undefined;\n};\n\nvar get = function get() {\n  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var path = arguments.length > 1 ? arguments[1] : undefined;\n  var defaultValue = arguments.length > 2 ? arguments[2] : undefined;\n  var result = compact(path.split(/[,[\\].]+?/)).reduce(function (result, key) {\n    return isNullOrUndefined(result) ? result : result[key];\n  }, obj);\n  return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n};\n\nvar focusOnErrorField = function focusOnErrorField(fields, fieldErrors) {\n  for (var key in fields) {\n    if (get(fieldErrors, key)) {\n      var field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n          break;\n        }\n      }\n    }\n  }\n};\n\nvar removeAllEventListeners = function removeAllEventListeners(ref, validateWithStateUpdate) {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n\nvar defaultReturn = {\n  isValid: false,\n  value: \'\'\n};\n\nvar getRadioValue = function getRadioValue(options) {\n  return Array.isArray(options) ? options.reduce(function (previous, option) {\n    return option && option.ref.checked ? {\n      isValid: true,\n      value: option.ref.value\n    } : previous;\n  }, defaultReturn) : defaultReturn;\n};\n\nvar index_esm_getMultipleSelectValue = function getMultipleSelectValue(options) {\n  return Object(toConsumableArray["a" /* default */])(options).filter(function (_ref2) {\n    var selected = _ref2.selected;\n    return selected;\n  }).map(function (_ref3) {\n    var value = _ref3.value;\n    return value;\n  });\n};\n\nvar isRadioInput = function isRadioInput(element) {\n  return element.type === \'radio\';\n};\n\nvar isFileInput = function isFileInput(element) {\n  return element.type === \'file\';\n};\n\nvar isCheckBoxInput = function isCheckBoxInput(element) {\n  return element.type === \'checkbox\';\n};\n\nvar isMultipleSelect = function isMultipleSelect(element) {\n  return element.type === "".concat(SELECT, "-multiple");\n};\n\nvar defaultResult = {\n  value: false,\n  isValid: false\n};\nvar validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = function getCheckboxValue(options) {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      var values = options.filter(function (option) {\n        return option && option.ref.checked;\n      }).map(function (_ref4) {\n        var value = _ref4.ref.value;\n        return value;\n      });\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    var _options$0$ref = options[0].ref,\n        checked = _options$0$ref.checked,\n        value = _options$0$ref.value,\n        attributes = _options$0$ref.attributes;\n    return checked ? attributes && !isUndefined(attributes.value) ? isUndefined(value) || value === \'\' ? validResult : {\n      value: value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nfunction getFieldValue(fieldsRef, name, shallowFieldsStateRef, excludeDisabled) {\n  var field = fieldsRef.current[name];\n\n  if (field) {\n    var _field$ref = field.ref,\n        value = _field$ref.value,\n        disabled = _field$ref.disabled,\n        ref = field.ref,\n        valueAsNumber = field.valueAsNumber,\n        valueAsDate = field.valueAsDate,\n        setValueAs = field.setValueAs;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return index_esm_getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBoxInput(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return valueAsNumber ? +value : valueAsDate ? ref.valueAsDate : setValueAs ? setValueAs(value) : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n\nfunction isDetached(element) {\n  if (!element) {\n    return true;\n  }\n\n  if (!(element instanceof HTMLElement) || element.nodeType === Node.DOCUMENT_NODE) {\n    return false;\n  }\n\n  return isDetached(element.parentNode);\n}\n\nvar isEmptyObject = function isEmptyObject(value) {\n  return isObject(value) && !Object.keys(value).length;\n};\n\nvar isBoolean = function isBoolean(value) {\n  return typeof value === \'boolean\';\n};\n\nfunction baseGet(object, updatePath) {\n  var path = updatePath.slice(0, -1);\n  var length = path.length;\n  var index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction unset(object, path) {\n  var updatePath = isKey(path) ? [path] : stringToPath(path);\n  var childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  var key = updatePath[updatePath.length - 1];\n  var previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (var k = 0; k < updatePath.slice(0, -1).length; k++) {\n    var index = -1;\n    var objectRef = undefined;\n    var currentPaths = updatePath.slice(0, -(k + 1));\n    var currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      var item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(function (data) {\n        return isObject(data) && !isEmptyObject(data) || isBoolean(data);\n      }).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n\nvar isSameRef = function isSameRef(fieldValue, ref) {\n  return fieldValue && fieldValue.ref === ref;\n};\n\nfunction findRemovedFieldAndRemoveListener(fieldsRef, handleChange, field, shallowFieldsStateRef, shouldUnregister, forceDelete) {\n  var ref = field.ref,\n      name = field.ref.name;\n  var fieldRef = fieldsRef.current[name];\n\n  if (!shouldUnregister) {\n    var value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach(function () {\n        var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var index = arguments.length > 1 ? arguments[1] : undefined;\n\n        if (isDetached(option.ref) && isSameRef(option, option.ref) || forceDelete) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, "[".concat(index, "]"));\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if (isDetached(ref) && isSameRef(fieldRef, ref) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n    delete fieldsRef.current[name];\n  }\n}\n\nvar isPrimitive = function isPrimitive(value) {\n  return isNullOrUndefined(value) || !isObjectType(value);\n};\n\nfunction deepMerge(target, source) {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (var key in source) {\n    var targetValue = target[key];\n    var sourceValue = source[key];\n\n    try {\n      target[key] = isObject(targetValue) && isObject(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;\n    } catch (_a) {}\n  }\n\n  return target;\n}\n\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\n  var index = -1;\n\n  while (++index < values.length) {\n    for (var key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key] ? set(dirtyFields[index] || {}, key) : dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), Object(defineProperty["a" /* default */])({}, key, true));\n      }\n    }\n\n    parentNode && !dirtyFields.length && delete parentNode[parentName];\n  }\n\n  return dirtyFields;\n}\n\nvar setFieldArrayDirtyFields = function setFieldArrayDirtyFields(values, defaultValues, dirtyFields) {\n  return deepMerge(setDirtyFields(values, defaultValues, dirtyFields), setDirtyFields(defaultValues, values, dirtyFields));\n};\n\nvar isString = function isString(value) {\n  return typeof value === \'string\';\n};\n\nvar getFieldsValues = function getFieldsValues(fieldsRef, shallowFieldsState, shouldUnregister, excludeDisabled, search) {\n  var output = {};\n\n  var _loop = function _loop(name) {\n    if (isUndefined(search) || (isString(search) ? name.startsWith(search) : Array.isArray(search) && search.find(function (data) {\n      return name.startsWith(data);\n    }))) {\n      output[name] = getFieldValue(fieldsRef, name, undefined, excludeDisabled);\n    }\n  };\n\n  for (var name in fieldsRef.current) {\n    _loop(name);\n  }\n\n  return shouldUnregister ? transformToNestObject(output) : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n\nfunction deepEqual(object1, object2, isErrorObject) {\n  if (isPrimitive(object1) || isPrimitive(object2) || object1 instanceof Date || object2 instanceof Date) {\n    return object1 === object2;\n  }\n\n  if (!Object(react["isValidElement"])(object1)) {\n    var keys1 = Object.keys(object1);\n    var keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (var _i = 0, _keys = keys1; _i < _keys.length; _i++) {\n      var key = _keys[_i];\n      var val1 = object1[key];\n\n      if (!(isErrorObject && key === \'ref\')) {\n        var val2 = object2[key];\n\n        if ((isObject(val1) || Array.isArray(val1)) && (isObject(val2) || Array.isArray(val2)) ? !deepEqual(val1, val2, isErrorObject) : val1 !== val2) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\nvar isErrorStateChanged = function isErrorStateChanged(_ref5) {\n  var errors = _ref5.errors,\n      name = _ref5.name,\n      error = _ref5.error,\n      validFields = _ref5.validFields,\n      fieldsWithValidation = _ref5.fieldsWithValidation;\n  var isValid = isUndefined(error);\n  var previousError = get(errors, name);\n  return isValid && !!previousError || !isValid && !deepEqual(previousError, error, true) || isValid && get(fieldsWithValidation, name) && !get(validFields, name);\n};\n\nvar isRegex = function isRegex(value) {\n  return value instanceof RegExp;\n};\n\nvar getValueAndMessage = function getValueAndMessage(validationData) {\n  return isObject(validationData) && !isRegex(validationData) ? validationData : {\n    value: validationData,\n    message: \'\'\n  };\n};\n\nvar isFunction = function isFunction(value) {\n  return typeof value === \'function\';\n};\n\nvar index_esm_isMessage = function isMessage(value) {\n  return isString(value) || Object(react["isValidElement"])(value);\n};\n\nfunction getValidateError(result, ref) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \'validate\';\n\n  if (index_esm_isMessage(result) || isBoolean(result) && !result) {\n    return {\n      type: type,\n      message: index_esm_isMessage(result) ? result : \'\',\n      ref: ref\n    };\n  }\n}\n\nvar index_esm_appendErrors = function appendErrors(name, validateAllFieldCriteria, errors, type, message) {\n  return validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n    types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), Object(defineProperty["a" /* default */])({}, type, message || true))\n  }) : {};\n};\n\nvar validateField = /*#__PURE__*/function () {\n  var _ref7 = Object(asyncToGenerator["a" /* default */])( /*#__PURE__*/regenerator_default.a.mark(function _callee(fieldsRef, validateAllFieldCriteria, _ref6, shallowFieldsStateRef) {\n    var ref, value, options, required, maxLength, minLength, min, max, pattern, validate, name, error, isRadio, isCheckBox, isRadioOrCheckbox, isEmpty, appendErrorsCurry, getMinMaxMessage, _ref8, _value, message, exceedMax, exceedMin, maxOutput, minOutput, valueNumber, valueDate, maxLengthOutput, minLengthOutput, _exceedMax, _exceedMin, _getValueAndMessage, patternValue, _message, fieldValue, validateRef, result, validateError, validationResult, _i2, _Object$entries, _Object$entries$_i, key, validateFunction, validateResult, _validateError;\n\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ref = _ref6.ref, value = _ref6.ref.value, options = _ref6.options, required = _ref6.required, maxLength = _ref6.maxLength, minLength = _ref6.minLength, min = _ref6.min, max = _ref6.max, pattern = _ref6.pattern, validate = _ref6.validate;\n            name = ref.name;\n            error = {};\n            isRadio = isRadioInput(ref);\n            isCheckBox = isCheckBoxInput(ref);\n            isRadioOrCheckbox = isRadio || isCheckBox;\n            isEmpty = value === \'\';\n            appendErrorsCurry = index_esm_appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n            getMinMaxMessage = function getMinMaxMessage(exceedMax, maxLengthMessage, minLengthMessage) {\n              var maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n              var minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n              var message = exceedMax ? maxLengthMessage : minLengthMessage;\n              error[name] = Object.assign({\n                type: exceedMax ? maxType : minType,\n                message: message,\n                ref: ref\n              }, exceedMax ? appendErrorsCurry(maxType, message) : appendErrorsCurry(minType, message));\n            };\n\n            if (!(required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value)) || isBoolean(value) && !value || isCheckBox && !getCheckboxValue(options).isValid || isRadio && !getRadioValue(options).isValid))) {\n              _context.next = 15;\n              break;\n            }\n\n            _ref8 = index_esm_isMessage(required) ? {\n              value: !!required,\n              message: required\n            } : getValueAndMessage(required), _value = _ref8.value, message = _ref8.message;\n\n            if (!_value) {\n              _context.next = 15;\n              break;\n            }\n\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.required,\n              message: message,\n              ref: isRadioOrCheckbox ? ((fieldsRef.current[name].options || [])[0] || {}).ref : ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 15;\n              break;\n            }\n\n            return _context.abrupt("return", error);\n\n          case 15:\n            if (!((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== \'\')) {\n              _context.next = 23;\n              break;\n            }\n\n            maxOutput = getValueAndMessage(max);\n            minOutput = getValueAndMessage(min);\n\n            if (!isNaN(value)) {\n              valueNumber = ref.valueAsNumber || parseFloat(value);\n\n              if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n              }\n\n              if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n              }\n            } else {\n              valueDate = ref.valueAsDate || new Date(value);\n\n              if (isString(maxOutput.value)) {\n                exceedMax = valueDate > new Date(maxOutput.value);\n              }\n\n              if (isString(minOutput.value)) {\n                exceedMin = valueDate < new Date(minOutput.value);\n              }\n            }\n\n            if (!(exceedMax || exceedMin)) {\n              _context.next = 23;\n              break;\n            }\n\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 23;\n              break;\n            }\n\n            return _context.abrupt("return", error);\n\n          case 23:\n            if (!(isString(value) && !isEmpty && (maxLength || minLength))) {\n              _context.next = 32;\n              break;\n            }\n\n            maxLengthOutput = getValueAndMessage(maxLength);\n            minLengthOutput = getValueAndMessage(minLength);\n            _exceedMax = !isNullOrUndefined(maxLengthOutput.value) && value.length > maxLengthOutput.value;\n            _exceedMin = !isNullOrUndefined(minLengthOutput.value) && value.length < minLengthOutput.value;\n\n            if (!(_exceedMax || _exceedMin)) {\n              _context.next = 32;\n              break;\n            }\n\n            getMinMaxMessage(_exceedMax, maxLengthOutput.message, minLengthOutput.message);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 32;\n              break;\n            }\n\n            return _context.abrupt("return", error);\n\n          case 32:\n            if (!(pattern && !isEmpty)) {\n              _context.next = 38;\n              break;\n            }\n\n            _getValueAndMessage = getValueAndMessage(pattern), patternValue = _getValueAndMessage.value, _message = _getValueAndMessage.message;\n\n            if (!(isRegex(patternValue) && !patternValue.test(value))) {\n              _context.next = 38;\n              break;\n            }\n\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.pattern,\n              message: _message,\n              ref: ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, _message));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 38;\n              break;\n            }\n\n            return _context.abrupt("return", error);\n\n          case 38:\n            if (!validate) {\n              _context.next = 71;\n              break;\n            }\n\n            fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n            validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n            if (!isFunction(validate)) {\n              _context.next = 52;\n              break;\n            }\n\n            _context.next = 44;\n            return validate(fieldValue);\n\n          case 44:\n            result = _context.sent;\n            validateError = getValidateError(result, validateRef);\n\n            if (!validateError) {\n              _context.next = 50;\n              break;\n            }\n\n            error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 50;\n              break;\n            }\n\n            return _context.abrupt("return", error);\n\n          case 50:\n            _context.next = 71;\n            break;\n\n          case 52:\n            if (!isObject(validate)) {\n              _context.next = 71;\n              break;\n            }\n\n            validationResult = {};\n            _i2 = 0, _Object$entries = Object.entries(validate);\n\n          case 55:\n            if (!(_i2 < _Object$entries.length)) {\n              _context.next = 67;\n              break;\n            }\n\n            _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2), key = _Object$entries$_i[0], validateFunction = _Object$entries$_i[1];\n\n            if (!(!isEmptyObject(validationResult) && !validateAllFieldCriteria)) {\n              _context.next = 59;\n              break;\n            }\n\n            return _context.abrupt("break", 67);\n\n          case 59:\n            _context.next = 61;\n            return validateFunction(fieldValue);\n\n          case 61:\n            validateResult = _context.sent;\n            _validateError = getValidateError(validateResult, validateRef, key);\n\n            if (_validateError) {\n              validationResult = Object.assign(Object.assign({}, _validateError), appendErrorsCurry(key, _validateError.message));\n\n              if (validateAllFieldCriteria) {\n                error[name] = validationResult;\n              }\n            }\n\n          case 64:\n            _i2++;\n            _context.next = 55;\n            break;\n\n          case 67:\n            if (isEmptyObject(validationResult)) {\n              _context.next = 71;\n              break;\n            }\n\n            error[name] = Object.assign({\n              ref: validateRef\n            }, validationResult);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 71;\n              break;\n            }\n\n            return _context.abrupt("return", error);\n\n          case 71:\n            return _context.abrupt("return", error);\n\n          case 72:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function validateField(_x, _x2, _x3, _x4) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\nvar getPath = function getPath(rootPath, values) {\n  var paths = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  for (var property in values) {\n    var rootName = rootPath + (isObject(values) ? ".".concat(property) : "[".concat(property, "]"));\n    isPrimitive(values[property]) ? paths.push(rootName) : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n\nvar assignWatchFields = function assignWatchFields(fieldValues, fieldName, watchFields, inputValue, isSingleField) {\n  var value = undefined;\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach(function (name) {\n        return watchFields.add(name);\n      });\n    }\n  }\n\n  return isUndefined(value) ? isSingleField ? inputValue : get(inputValue, fieldName) : value;\n};\n\nvar skipValidation = function skipValidation(_ref9) {\n  var isOnBlur = _ref9.isOnBlur,\n      isOnChange = _ref9.isOnChange,\n      isOnTouch = _ref9.isOnTouch,\n      isTouched = _ref9.isTouched,\n      isReValidateOnBlur = _ref9.isReValidateOnBlur,\n      isReValidateOnChange = _ref9.isReValidateOnChange,\n      isBlurEvent = _ref9.isBlurEvent,\n      isSubmitted = _ref9.isSubmitted,\n      isOnAll = _ref9.isOnAll;\n\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n\n  return true;\n};\n\nvar getFieldArrayParentName = function getFieldArrayParentName(name) {\n  return name.substring(0, name.indexOf(\'[\'));\n};\n\nvar isMatchFieldArrayName = function isMatchFieldArrayName(name, searchName) {\n  return RegExp("^".concat(searchName, "([|.)\\\\d+").replace(/\\[/g, \'\\\\[\').replace(/\\]/g, \'\\\\]\')).test(name);\n};\n\nvar index_esm_isNameInFieldArray = function isNameInFieldArray(names, name) {\n  return Object(toConsumableArray["a" /* default */])(names).some(function (current) {\n    return isMatchFieldArrayName(name, current);\n  });\n};\n\nvar isSelectInput = function isSelectInput(element) {\n  return element.type === "".concat(SELECT, "-one");\n};\n\nfunction onDomRemove(fieldsRef, removeFieldEventListenerAndRef) {\n  var observer = new MutationObserver(function () {\n    for (var _i3 = 0, _Object$values = Object.values(fieldsRef.current); _i3 < _Object$values.length; _i3++) {\n      var field = _Object$values[_i3];\n\n      if (field && field.options) {\n        var _iterator = _createForOfIteratorHelper(field.options),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var option = _step.value;\n\n            if (option && option.ref && isDetached(option.ref)) {\n              removeFieldEventListenerAndRef(field);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nvar isWeb = typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n\nfunction cloneObject(data) {\n  var copy;\n\n  if (isPrimitive(data) || isWeb && data instanceof File) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n\n    var _iterator2 = _createForOfIteratorHelper(data),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var item = _step2.value;\n        copy.add(item);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n\n    var _iterator3 = _createForOfIteratorHelper(data.keys()),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        copy.set(key, cloneObject(data.get(key)));\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (var _key in data) {\n    copy[_key] = cloneObject(data[_key]);\n  }\n\n  return copy;\n}\n\nvar modeChecker = function modeChecker(mode) {\n  return {\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched\n  };\n};\n\nvar isRadioOrCheckboxFunction = function isRadioOrCheckboxFunction(ref) {\n  return isRadioInput(ref) || isCheckBoxInput(ref);\n};\n\nvar isWindowUndefined = typeof window === UNDEFINED;\nvar isProxyEnabled = isWeb ? \'Proxy\' in window : typeof Proxy !== UNDEFINED;\n\nfunction useForm() {\n  var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref10$mode = _ref10.mode,\n      mode = _ref10$mode === void 0 ? VALIDATION_MODE.onSubmit : _ref10$mode,\n      _ref10$reValidateMode = _ref10.reValidateMode,\n      reValidateMode = _ref10$reValidateMode === void 0 ? VALIDATION_MODE.onChange : _ref10$reValidateMode,\n      resolver = _ref10.resolver,\n      context = _ref10.context,\n      _ref10$defaultValues = _ref10.defaultValues,\n      defaultValues = _ref10$defaultValues === void 0 ? {} : _ref10$defaultValues,\n      _ref10$shouldFocusErr = _ref10.shouldFocusError,\n      shouldFocusError = _ref10$shouldFocusErr === void 0 ? true : _ref10$shouldFocusErr,\n      _ref10$shouldUnregist = _ref10.shouldUnregister,\n      shouldUnregister = _ref10$shouldUnregist === void 0 ? true : _ref10$shouldUnregist,\n      criteriaMode = _ref10.criteriaMode;\n\n  var fieldsRef = Object(react["useRef"])({});\n  var fieldArrayDefaultValuesRef = Object(react["useRef"])({});\n  var fieldArrayValuesRef = Object(react["useRef"])({});\n  var watchFieldsRef = Object(react["useRef"])(new Set());\n  var useWatchFieldsRef = Object(react["useRef"])({});\n  var useWatchRenderFunctionsRef = Object(react["useRef"])({});\n  var fieldsWithValidationRef = Object(react["useRef"])({});\n  var validFieldsRef = Object(react["useRef"])({});\n  var defaultValuesRef = Object(react["useRef"])(defaultValues);\n  var defaultValuesAtRenderRef = Object(react["useRef"])({});\n  var isUnMount = Object(react["useRef"])(false);\n  var isWatchAllRef = Object(react["useRef"])(false);\n  var handleChangeRef = Object(react["useRef"])();\n  var shallowFieldsStateRef = Object(react["useRef"])({});\n  var resetFieldArrayFunctionRef = Object(react["useRef"])({});\n  var contextRef = Object(react["useRef"])(context);\n  var resolverRef = Object(react["useRef"])(resolver);\n  var fieldArrayNamesRef = Object(react["useRef"])(new Set());\n  var modeRef = Object(react["useRef"])(modeChecker(mode));\n  var _modeRef$current = modeRef.current,\n      isOnSubmit = _modeRef$current.isOnSubmit,\n      isOnTouch = _modeRef$current.isOnTouch;\n  var isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n\n  var _useState = Object(react["useState"])({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {}\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      formState = _useState2[0],\n      setFormState = _useState2[1];\n\n  var readFormStateRef = Object(react["useRef"])({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled\n  });\n  var formStateRef = Object(react["useRef"])(formState);\n  var observerRef = Object(react["useRef"])();\n  var _useRef$current = Object(react["useRef"])(modeChecker(reValidateMode)).current,\n      isReValidateOnBlur = _useRef$current.isOnBlur,\n      isReValidateOnChange = _useRef$current.isOnChange;\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister ? {} : isEmptyObject(shallowFieldsStateRef.current) ? cloneObject(defaultValues) : shallowFieldsStateRef.current;\n  var updateFormState = Object(react["useCallback"])(function () {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!isUnMount.current) {\n      formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), state);\n      setFormState(formStateRef.current);\n    }\n  }, []);\n  var shouldRenderBaseOnError = Object(react["useCallback"])(function (name, error) {\n    var shouldRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var state = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var isValid = arguments.length > 4 ? arguments[4] : undefined;\n    var shouldReRender = shouldRender || isErrorStateChanged({\n      errors: formStateRef.current.errors,\n      error: error,\n      name: name,\n      validFields: validFieldsRef.current,\n      fieldsWithValidation: fieldsWithValidationRef.current\n    });\n    var previousError = get(formStateRef.current.errors, name);\n\n    if (error) {\n      unset(validFieldsRef.current, name);\n      shouldReRender = shouldReRender || !previousError || !deepEqual(previousError, error, true);\n      set(formStateRef.current.errors, name, error);\n    } else {\n      if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n        set(validFieldsRef.current, name, true);\n        shouldReRender = shouldReRender || previousError;\n      }\n\n      unset(formStateRef.current.errors, name);\n    }\n\n    if (shouldReRender && !isNullOrUndefined(shouldRender) || !isEmptyObject(state)) {\n      updateFormState(Object.assign(Object.assign({}, state), resolverRef.current ? {\n        isValid: !!isValid\n      } : {}));\n    }\n  }, []);\n  var setFieldValue = Object(react["useCallback"])(function (name, rawValue) {\n    var _fieldsRef$current$na = fieldsRef.current[name],\n        ref = _fieldsRef$current$na.ref,\n        options = _fieldsRef$current$na.options;\n    var value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue) ? \'\' : rawValue;\n\n    if (isRadioInput(ref)) {\n      (options || []).forEach(function (_ref11) {\n        var radioRef = _ref11.ref;\n        return radioRef.checked = radioRef.value === value;\n      });\n    } else if (isFileInput(ref) && !isString(value)) {\n      ref.files = value;\n    } else if (isMultipleSelect(ref)) {\n      Object(toConsumableArray["a" /* default */])(ref.options).forEach(function (selectRef) {\n        return selectRef.selected = value.includes(selectRef.value);\n      });\n    } else if (isCheckBoxInput(ref) && options) {\n      options.length > 1 ? options.forEach(function (_ref12) {\n        var checkboxRef = _ref12.ref;\n        return checkboxRef.checked = Array.isArray(value) ? !!value.find(function (data) {\n          return data === checkboxRef.value;\n        }) : value === checkboxRef.value;\n      }) : options[0].ref.checked = !!value;\n    } else {\n      ref.value = value;\n    }\n  }, []);\n  var isFormDirty = Object(react["useCallback"])(function (name, data) {\n    if (readFormStateRef.current.isDirty) {\n      var formValues = getValues();\n      name && data && set(formValues, name, data);\n      return !deepEqual(formValues, isEmptyObject(defaultValuesRef.current) ? defaultValuesAtRenderRef.current : defaultValuesRef.current);\n    }\n\n    return false;\n  }, []);\n  var updateAndGetDirtyState = Object(react["useCallback"])(function (name) {\n    var shouldRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (readFormStateRef.current.isDirty || readFormStateRef.current.dirtyFields) {\n      var isFieldDirty = !deepEqual(get(defaultValuesAtRenderRef.current, name), getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      var isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n      var previousIsDirty = formStateRef.current.isDirty;\n      isFieldDirty ? set(formStateRef.current.dirtyFields, name, true) : unset(formStateRef.current.dirtyFields, name);\n      var state = {\n        isDirty: isFormDirty(),\n        dirtyFields: formStateRef.current.dirtyFields\n      };\n      var isChanged = readFormStateRef.current.isDirty && previousIsDirty !== state.isDirty || readFormStateRef.current.dirtyFields && isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name);\n      isChanged && shouldRender && updateFormState(state);\n      return isChanged ? state : {};\n    }\n\n    return {};\n  }, []);\n  var executeValidation = Object(react["useCallback"])( /*#__PURE__*/function () {\n    var _ref13 = Object(asyncToGenerator["a" /* default */])( /*#__PURE__*/regenerator_default.a.mark(function _callee2(name, skipReRender) {\n      var error;\n      return regenerator_default.a.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (true) {\n                _context2.next = 4;\n                break;\n              }\n\n              if (fieldsRef.current[name]) {\n                _context2.next = 4;\n                break;\n              }\n\n              console.warn(\'📋 Field is missing with `name` attribute: \', name);\n              return _context2.abrupt("return", false);\n\n            case 4:\n              _context2.next = 6;\n              return validateField(fieldsRef, isValidateAllFieldCriteria, fieldsRef.current[name], shallowFieldsStateRef);\n\n            case 6:\n              _context2.t0 = name;\n              error = _context2.sent[_context2.t0];\n              shouldRenderBaseOnError(name, error, skipReRender);\n              return _context2.abrupt("return", isUndefined(error));\n\n            case 10:\n            case "end":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x5, _x6) {\n      return _ref13.apply(this, arguments);\n    };\n  }(), [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\n  var executeSchemaOrResolverValidation = Object(react["useCallback"])( /*#__PURE__*/function () {\n    var _ref14 = Object(asyncToGenerator["a" /* default */])( /*#__PURE__*/regenerator_default.a.mark(function _callee3(names) {\n      var _yield$resolverRef$cu, errors, previousFormIsValid, isInputsValid, _error;\n\n      return regenerator_default.a.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\n\n            case 2:\n              _yield$resolverRef$cu = _context3.sent;\n              errors = _yield$resolverRef$cu.errors;\n              previousFormIsValid = formStateRef.current.isValid;\n\n              if (!Array.isArray(names)) {\n                _context3.next = 11;\n                break;\n              }\n\n              isInputsValid = names.map(function (name) {\n                var error = get(errors, name);\n                error ? set(formStateRef.current.errors, name, error) : unset(formStateRef.current.errors, name);\n                return !error;\n              }).every(Boolean);\n              updateFormState({\n                isValid: isEmptyObject(errors)\n              });\n              return _context3.abrupt("return", isInputsValid);\n\n            case 11:\n              _error = get(errors, names);\n              shouldRenderBaseOnError(names, _error, previousFormIsValid !== isEmptyObject(errors), {}, isEmptyObject(errors));\n              return _context3.abrupt("return", !_error);\n\n            case 14:\n            case "end":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x7) {\n      return _ref14.apply(this, arguments);\n    };\n  }(), [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\n  var trigger = Object(react["useCallback"])( /*#__PURE__*/function () {\n    var _ref15 = Object(asyncToGenerator["a" /* default */])( /*#__PURE__*/regenerator_default.a.mark(function _callee5(name) {\n      var fields, result;\n      return regenerator_default.a.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              fields = name || Object.keys(fieldsRef.current);\n\n              if (!resolverRef.current) {\n                _context5.next = 3;\n                break;\n              }\n\n              return _context5.abrupt("return", executeSchemaOrResolverValidation(fields));\n\n            case 3:\n              if (!Array.isArray(fields)) {\n                _context5.next = 10;\n                break;\n              }\n\n              !name && (formStateRef.current.errors = {});\n              _context5.next = 7;\n              return Promise.all(fields.map( /*#__PURE__*/function () {\n                var _ref16 = Object(asyncToGenerator["a" /* default */])( /*#__PURE__*/regenerator_default.a.mark(function _callee4(data) {\n                  return regenerator_default.a.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          _context4.next = 2;\n                          return executeValidation(data, null);\n\n                        case 2:\n                          return _context4.abrupt("return", _context4.sent);\n\n                        case 3:\n                        case "end":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4);\n                }));\n\n                return function (_x9) {\n                  return _ref16.apply(this, arguments);\n                };\n              }()));\n\n            case 7:\n              result = _context5.sent;\n              updateFormState();\n              return _context5.abrupt("return", result.every(Boolean));\n\n            case 10:\n              _context5.next = 12;\n              return executeValidation(fields);\n\n            case 12:\n              return _context5.abrupt("return", _context5.sent);\n\n            case 13:\n            case "end":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x8) {\n      return _ref15.apply(this, arguments);\n    };\n  }(), [executeSchemaOrResolverValidation, executeValidation]);\n  var setInternalValues = Object(react["useCallback"])(function (name, value, _ref17) {\n    var shouldDirty = _ref17.shouldDirty,\n        shouldValidate = _ref17.shouldValidate;\n    var data = {};\n    set(data, name, value);\n\n    var _iterator4 = _createForOfIteratorHelper(getPath(name, value)),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var fieldName = _step4.value;\n\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName);\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  }, [trigger, setFieldValue, updateAndGetDirtyState]);\n  var setInternalValue = Object(react["useCallback"])(function (name, value, config) {\n    !isPrimitive(value) && set(shallowFieldsStateRef.current, name, value);\n\n    if (fieldsRef.current[name]) {\n      setFieldValue(name, value);\n      config.shouldDirty && updateAndGetDirtyState(name);\n      config.shouldValidate && trigger(name);\n    } else if (!isPrimitive(value)) {\n      setInternalValues(name, value, config);\n\n      if (fieldArrayNamesRef.current.has(name)) {\n        fieldArrayDefaultValuesRef.current[name] = value;\n        resetFieldArrayFunctionRef.current[name](Object(defineProperty["a" /* default */])({}, name, value));\n\n        if ((readFormStateRef.current.isDirty || readFormStateRef.current.dirtyFields) && config.shouldDirty) {\n          set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(value, get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n          updateFormState({\n            isDirty: !deepEqual(Object.assign(Object.assign({}, getValues()), Object(defineProperty["a" /* default */])({}, name, value)), defaultValuesRef.current)\n          });\n        }\n      }\n    }\n\n    !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n  }, [updateAndGetDirtyState, setFieldValue, setInternalValues]);\n\n  var isFieldWatched = function isFieldWatched(name) {\n    return isWatchAllRef.current || watchFieldsRef.current.has(name) || watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n  };\n\n  var renderWatchedInputs = function renderWatchedInputs(name) {\n    var found = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (var key in useWatchFieldsRef.current) {\n        if (!name || !useWatchFieldsRef.current[key].size || useWatchFieldsRef.current[key].has(name) || useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(name, value, config) {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current ? handleChangeRef.current : /*#__PURE__*/function () {\n    var _ref19 = Object(asyncToGenerator["a" /* default */])( /*#__PURE__*/regenerator_default.a.mark(function _callee6(_ref18) {\n      var type, target, name, field, error, isValid, isBlurEvent, shouldSkipValidation, state, shouldRender, _yield$resolverRef$cu2, errors, previousFormIsValid, parentNodeName, currentError;\n\n      return regenerator_default.a.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              type = _ref18.type, target = _ref18.target;\n              name = target.name;\n              field = fieldsRef.current[name];\n\n              if (!field) {\n                _context6.next = 31;\n                break;\n              }\n\n              isBlurEvent = type === EVENTS.BLUR;\n              shouldSkipValidation = skipValidation(Object.assign({\n                isBlurEvent: isBlurEvent,\n                isReValidateOnChange: isReValidateOnChange,\n                isReValidateOnBlur: isReValidateOnBlur,\n                isTouched: !!get(formStateRef.current.touched, name),\n                isSubmitted: formStateRef.current.isSubmitted\n              }, modeRef.current));\n              state = updateAndGetDirtyState(name, false);\n              shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n              if (isBlurEvent && !get(formStateRef.current.touched, name) && readFormStateRef.current.touched) {\n                set(formStateRef.current.touched, name, true);\n                state = Object.assign(Object.assign({}, state), {\n                  touched: formStateRef.current.touched\n                });\n              }\n\n              if (!shouldUnregister && isCheckBoxInput(target)) {\n                set(shallowFieldsStateRef.current, name, getFieldValue(fieldsRef, name));\n              }\n\n              if (!shouldSkipValidation) {\n                _context6.next = 13;\n                break;\n              }\n\n              renderWatchedInputs(name);\n              return _context6.abrupt("return", (!isEmptyObject(state) || shouldRender && isEmptyObject(state)) && updateFormState(state));\n\n            case 13:\n              if (!resolverRef.current) {\n                _context6.next = 25;\n                break;\n              }\n\n              _context6.next = 16;\n              return resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\n\n            case 16:\n              _yield$resolverRef$cu2 = _context6.sent;\n              errors = _yield$resolverRef$cu2.errors;\n              previousFormIsValid = formStateRef.current.isValid;\n              error = get(errors, name);\n\n              if (isCheckBoxInput(target) && !error && resolverRef.current) {\n                parentNodeName = getFieldArrayParentName(name);\n                currentError = get(errors, parentNodeName, {});\n                currentError.type && currentError.message && (error = currentError);\n\n                if (parentNodeName && (currentError || get(formStateRef.current.errors, parentNodeName))) {\n                  name = parentNodeName;\n                }\n              }\n\n              isValid = isEmptyObject(errors);\n              previousFormIsValid !== isValid && (shouldRender = true);\n              _context6.next = 29;\n              break;\n\n            case 25:\n              _context6.next = 27;\n              return validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef);\n\n            case 27:\n              _context6.t0 = name;\n              error = _context6.sent[_context6.t0];\n\n            case 29:\n              renderWatchedInputs(name);\n              shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n\n            case 31:\n            case "end":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x10) {\n      return _ref19.apply(this, arguments);\n    };\n  }();\n\n  function setFieldArrayDefaultValues(data) {\n    if (!shouldUnregister) {\n      var copy = cloneObject(data);\n\n      var _iterator5 = _createForOfIteratorHelper(fieldArrayNamesRef.current),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var value = _step5.value;\n\n          if (isKey(value) && !copy[value]) {\n            copy = Object.assign(Object.assign({}, copy), Object(defineProperty["a" /* default */])({}, value, []));\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return copy;\n    }\n\n    return data;\n  }\n\n  function getValues(payload) {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      var data = {};\n\n      var _iterator6 = _createForOfIteratorHelper(payload),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _name = _step6.value;\n          set(data, _name, getFieldValue(fieldsRef, _name, shallowFieldsStateRef));\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister));\n  }\n\n  var validateResolver = Object(react["useCallback"])( /*#__PURE__*/Object(asyncToGenerator["a" /* default */])( /*#__PURE__*/regenerator_default.a.mark(function _callee7() {\n    var values,\n        _yield$resolverRef$cu3,\n        errors,\n        isValid,\n        _args7 = arguments;\n\n    return regenerator_default.a.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            values = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};\n            _context7.next = 3;\n            return resolverRef.current(Object.assign(Object.assign({}, getValues()), values), contextRef.current, isValidateAllFieldCriteria);\n\n          case 3:\n            _yield$resolverRef$cu3 = _context7.sent;\n            errors = _yield$resolverRef$cu3.errors;\n            isValid = isEmptyObject(errors);\n            formStateRef.current.isValid !== isValid && updateFormState({\n              isValid: isValid\n            });\n\n          case 7:\n          case "end":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  })), [isValidateAllFieldCriteria]);\n  var removeFieldEventListener = Object(react["useCallback"])(function (field, forceDelete) {\n    return findRemovedFieldAndRemoveListener(fieldsRef, handleChangeRef.current, field, shallowFieldsStateRef, shouldUnregister, forceDelete);\n  }, [shouldUnregister]);\n  var updateWatchedValue = Object(react["useCallback"])(function (name) {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      var _iterator7 = _createForOfIteratorHelper(watchFieldsRef.current),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var watchField = _step7.value;\n\n          if (watchField.startsWith(name)) {\n            updateFormState();\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n  var removeFieldEventListenerAndRef = Object(react["useCallback"])(function (field, forceDelete) {\n    if (field) {\n      removeFieldEventListener(field, forceDelete);\n\n      if (shouldUnregister && !compact(field.options || []).length) {\n        unset(defaultValuesAtRenderRef.current, field.ref.name);\n        unset(validFieldsRef.current, field.ref.name);\n        unset(fieldsWithValidationRef.current, field.ref.name);\n        unset(formStateRef.current.errors, field.ref.name);\n        set(formStateRef.current.dirtyFields, field.ref.name, true);\n        updateFormState({\n          isDirty: isFormDirty()\n        });\n        readFormStateRef.current.isValid && resolverRef.current && validateResolver();\n        updateWatchedValue(field.ref.name);\n      }\n    }\n  }, [validateResolver, removeFieldEventListener]);\n\n  function clearErrors(name) {\n    name && (Array.isArray(name) ? name : [name]).forEach(function (inputName) {\n      return fieldsRef.current[inputName] && isKey(inputName) ? delete formStateRef.current.errors[inputName] : unset(formStateRef.current.errors, inputName);\n    });\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {}\n    });\n  }\n\n  function setError(name, error) {\n    var ref = (fieldsRef.current[name] || {}).ref;\n    set(formStateRef.current.errors, name, Object.assign(Object.assign({}, error), {\n      ref: ref\n    }));\n    updateFormState({\n      isValid: false\n    });\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  var watchInternal = Object(react["useCallback"])(function (fieldNames, defaultValue, watchId) {\n    var watchFields = watchId ? useWatchFieldsRef.current[watchId] : watchFieldsRef.current;\n    var fieldValues = getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister, false, fieldNames);\n\n    if (isString(fieldNames)) {\n      if (fieldArrayNamesRef.current.has(fieldNames)) {\n        var fieldArrayValue = get(fieldArrayValuesRef.current, fieldNames, []);\n        fieldValues = !fieldArrayValue.length || fieldArrayValue.length !== compact(get(fieldValues, fieldNames, [])).length ? fieldArrayValuesRef.current : fieldValues;\n      }\n\n      return assignWatchFields(fieldValues, fieldNames, watchFields, isUndefined(get(defaultValuesRef.current, fieldNames)) ? defaultValue : get(defaultValuesRef.current, fieldNames), true);\n    }\n\n    var combinedDefaultValues = isUndefined(defaultValue) ? defaultValuesRef.current : defaultValue;\n\n    if (Array.isArray(fieldNames)) {\n      return fieldNames.reduce(function (previous, name) {\n        return Object.assign(Object.assign({}, previous), Object(defineProperty["a" /* default */])({}, name, assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues)));\n      }, {});\n    }\n\n    isWatchAllRef.current = isUndefined(watchId);\n    return transformToNestObject(!isEmptyObject(fieldValues) && fieldValues || combinedDefaultValues);\n  }, []);\n\n  function watch(fieldNames, defaultValue) {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(name) {\n    var _iterator8 = _createForOfIteratorHelper(Array.isArray(name) ? name : [name]),\n        _step8;\n\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var fieldName = _step8.value;\n        removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n  }\n\n  function registerFieldRef(ref) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (false) {}\n\n    var name = ref.name,\n        type = ref.type,\n        value = ref.value;\n    var fieldRefAndValidationOptions = Object.assign({\n      ref: ref\n    }, options);\n    var fields = fieldsRef.current;\n    var isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    var isFieldArray = index_esm_isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n    var compareRef = function compareRef(currentRef) {\n      return isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    };\n\n    var field = fields[name];\n    var isEmptyDefaultValue = true;\n    var defaultValue;\n\n    if (field && (isRadioOrCheckbox ? Array.isArray(field.options) && compact(field.options).find(function (option) {\n      return value === option.ref.value && compareRef(option.ref);\n    }) : compareRef(field.ref))) {\n      fields[name] = Object.assign(Object.assign({}, field), options);\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox ? Object.assign({\n        options: [].concat(Object(toConsumableArray["a" /* default */])(compact(field && field.options || [])), [{\n          ref: ref\n        }]),\n        ref: {\n          type: type,\n          name: name\n        }\n      }, options) : Object.assign({}, fieldRefAndValidationOptions);\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n    var isEmptyUnmountFields = isUndefined(get(shallowFieldsStateRef.current, name));\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(isEmptyUnmountFields ? defaultValuesRef.current : shallowFieldsStateRef.current, name);\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef).then(function (error) {\n          var previousFormIsValid = formStateRef.current.isValid;\n          isEmptyObject(error) ? set(validFieldsRef.current, name, true) : unset(validFieldsRef.current, name);\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (!defaultValuesAtRenderRef.current[name] && !(isFieldArray && isEmptyDefaultValue)) {\n      var fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(defaultValuesAtRenderRef.current, name, isEmptyDefaultValue ? isObject(fieldValue) ? Object.assign({}, fieldValue) : fieldValue : defaultValue);\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(isRadioOrCheckbox && field.options ? field.options[field.options.length - 1] : field, isRadioOrCheckbox || isSelectInput(ref), handleChangeRef.current);\n    }\n  }\n\n  function register(refOrRegisterOptions, options) {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({\n          name: refOrRegisterOptions\n        }, options);\n      } else if (isObject(refOrRegisterOptions) && \'name\' in refOrRegisterOptions) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return function (ref) {\n          return ref && registerFieldRef(ref, refOrRegisterOptions);\n        };\n      }\n    }\n  }\n\n  var handleSubmit = Object(react["useCallback"])(function (onValid, onInvalid) {\n    return /*#__PURE__*/function () {\n      var _ref21 = Object(asyncToGenerator["a" /* default */])( /*#__PURE__*/regenerator_default.a.mark(function _callee8(e) {\n        var fieldErrors, fieldValues, _yield$resolverRef$cu4, errors, values, _i4, _Object$values2, field, _name2, fieldError;\n\n        return regenerator_default.a.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (e && e.preventDefault) {\n                  e.preventDefault();\n                  e.persist();\n                }\n\n                fieldErrors = {};\n                fieldValues = setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister, true));\n                readFormStateRef.current.isSubmitting && updateFormState({\n                  isSubmitting: true\n                });\n                _context8.prev = 4;\n\n                if (!resolverRef.current) {\n                  _context8.next = 15;\n                  break;\n                }\n\n                _context8.next = 8;\n                return resolverRef.current(fieldValues, contextRef.current, isValidateAllFieldCriteria);\n\n              case 8:\n                _yield$resolverRef$cu4 = _context8.sent;\n                errors = _yield$resolverRef$cu4.errors;\n                values = _yield$resolverRef$cu4.values;\n                formStateRef.current.errors = fieldErrors = errors;\n                fieldValues = values;\n                _context8.next = 27;\n                break;\n\n              case 15:\n                _i4 = 0, _Object$values2 = Object.values(fieldsRef.current);\n\n              case 16:\n                if (!(_i4 < _Object$values2.length)) {\n                  _context8.next = 27;\n                  break;\n                }\n\n                field = _Object$values2[_i4];\n\n                if (!field) {\n                  _context8.next = 24;\n                  break;\n                }\n\n                _name2 = field.ref.name;\n                _context8.next = 22;\n                return validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef);\n\n              case 22:\n                fieldError = _context8.sent;\n\n                if (fieldError[_name2]) {\n                  set(fieldErrors, _name2, fieldError[_name2]);\n                  unset(validFieldsRef.current, _name2);\n                } else if (get(fieldsWithValidationRef.current, _name2)) {\n                  unset(formStateRef.current.errors, _name2);\n                  set(validFieldsRef.current, _name2, true);\n                }\n\n              case 24:\n                _i4++;\n                _context8.next = 16;\n                break;\n\n              case 27:\n                if (!(isEmptyObject(fieldErrors) && Object.keys(formStateRef.current.errors).every(function (name) {\n                  return name in fieldsRef.current;\n                }))) {\n                  _context8.next = 33;\n                  break;\n                }\n\n                updateFormState({\n                  errors: {},\n                  isSubmitting: true\n                });\n                _context8.next = 31;\n                return onValid(fieldValues, e);\n\n              case 31:\n                _context8.next = 39;\n                break;\n\n              case 33:\n                formStateRef.current.errors = Object.assign(Object.assign({}, formStateRef.current.errors), fieldErrors);\n                _context8.t0 = onInvalid;\n\n                if (!_context8.t0) {\n                  _context8.next = 38;\n                  break;\n                }\n\n                _context8.next = 38;\n                return onInvalid(formStateRef.current.errors, e);\n\n              case 38:\n                shouldFocusError && focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n\n              case 39:\n                _context8.prev = 39;\n                formStateRef.current.isSubmitting = false;\n                updateFormState({\n                  isSubmitted: true,\n                  isSubmitting: false,\n                  isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n                  submitCount: formStateRef.current.submitCount + 1\n                });\n                return _context8.finish(39);\n\n              case 43:\n              case "end":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, null, [[4,, 39, 43]]);\n      }));\n\n      return function (_x11) {\n        return _ref21.apply(this, arguments);\n      };\n    }();\n  }, [shouldFocusError, isValidateAllFieldCriteria]);\n\n  var resetRefs = function resetRefs(_ref22) {\n    var errors = _ref22.errors,\n        isDirty = _ref22.isDirty,\n        isSubmitted = _ref22.isSubmitted,\n        touched = _ref22.touched,\n        isValid = _ref22.isValid,\n        submitCount = _ref22.submitCount,\n        dirtyFields = _ref22.dirtyFields;\n\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n  };\n\n  var reset = function reset(values) {\n    var omitResetState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (isWeb) {\n      for (var _i5 = 0, _Object$values3 = Object.values(fieldsRef.current); _i5 < _Object$values3.length; _i5++) {\n        var field = _Object$values3[_i5];\n\n        if (field) {\n          var _ref23 = field.ref,\n              options = field.options;\n          var inputRef = isRadioOrCheckboxFunction(_ref23) && Array.isArray(options) ? options[0].ref : _ref23;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest(\'form\').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = cloneObject(values || defaultValuesRef.current);\n    values && renderWatchedInputs(\'\');\n    Object.values(resetFieldArrayFunctionRef.current).forEach(function (resetFieldArray) {\n      return isFunction(resetFieldArray) && resetFieldArray();\n    });\n    shallowFieldsStateRef.current = shouldUnregister ? {} : cloneObject(values) || {};\n    resetRefs(omitResetState);\n  };\n\n  Object(react["useEffect"])(function () {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current = observerRef.current || !isWeb ? observerRef.current : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n  Object(react["useEffect"])(function () {\n    return function () {\n      observerRef.current && observerRef.current.disconnect();\n\n      if (false) {}\n\n      isUnMount.current = true;\n      Object.values(fieldsRef.current).forEach(function (field) {\n        return removeFieldEventListenerAndRef(field, true);\n      });\n    };\n  }, []);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid = deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) && isEmptyObject(formStateRef.current.errors);\n  }\n\n  var commonProps = {\n    trigger: trigger,\n    setValue: Object(react["useCallback"])(setValue, [setInternalValue, trigger]),\n    getValues: Object(react["useCallback"])(getValues, []),\n    register: Object(react["useCallback"])(register, [defaultValuesRef.current]),\n    unregister: Object(react["useCallback"])(unregister, [])\n  };\n  var control = Object(react["useMemo"])(function () {\n    return Object.assign({\n      isFormDirty: isFormDirty,\n      updateWatchedValue: updateWatchedValue,\n      shouldUnregister: shouldUnregister,\n      updateFormState: updateFormState,\n      removeFieldEventListener: removeFieldEventListener,\n      watchInternal: watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur: isReValidateOnBlur,\n        isReValidateOnChange: isReValidateOnChange\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef: fieldsRef,\n      resetFieldArrayFunctionRef: resetFieldArrayFunctionRef,\n      useWatchFieldsRef: useWatchFieldsRef,\n      useWatchRenderFunctionsRef: useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef: fieldArrayDefaultValuesRef,\n      validFieldsRef: validFieldsRef,\n      fieldsWithValidationRef: fieldsWithValidationRef,\n      fieldArrayNamesRef: fieldArrayNamesRef,\n      readFormStateRef: readFormStateRef,\n      formStateRef: formStateRef,\n      defaultValuesRef: defaultValuesRef,\n      shallowFieldsStateRef: shallowFieldsStateRef,\n      fieldArrayValuesRef: fieldArrayValuesRef\n    }, commonProps);\n  }, [defaultValuesRef.current, updateWatchedValue, shouldUnregister, removeFieldEventListener, watchInternal]);\n  return Object.assign({\n    watch: watch,\n    control: control,\n    formState: isProxyEnabled ? new Proxy(formState, {\n      get: function get(obj, prop) {\n        if (false) {}\n\n        if (prop in obj) {\n          readFormStateRef.current[prop] = true;\n          return obj[prop];\n        }\n\n        return undefined;\n      }\n    }) : formState,\n    handleSubmit: handleSubmit,\n    reset: Object(react["useCallback"])(reset, []),\n    clearErrors: Object(react["useCallback"])(clearErrors, []),\n    setError: Object(react["useCallback"])(setError, []),\n    errors: formState.errors\n  }, commonProps);\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nvar FormContext = Object(react["createContext"])(null);\nFormContext.displayName = \'RHFContext\';\n\nvar index_esm_useFormContext = function useFormContext() {\n  return Object(react["useContext"])(FormContext);\n};\n\nvar index_esm_FormProvider = function FormProvider(_a) {\n  var children = _a.children,\n      props = __rest(_a, ["children"]);\n\n  return Object(react["createElement"])(FormContext.Provider, {\n    value: Object.assign({}, props)\n  }, children);\n};\n\nvar generateId = function generateId() {\n  var d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n  return \'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == \'x\' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nfunction removeAtIndexes(data, indexes) {\n  var i = 0;\n\n  var temp = Object(toConsumableArray["a" /* default */])(data);\n\n  var _iterator9 = _createForOfIteratorHelper(indexes),\n      _step9;\n\n  try {\n    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n      var index = _step9.value;\n      temp.splice(index - i, 1);\n      i++;\n    }\n  } catch (err) {\n    _iterator9.e(err);\n  } finally {\n    _iterator9.f();\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nvar removeArrayAt = function removeArrayAt(data, index) {\n  return isUndefined(index) ? [] : removeAtIndexes(data, (Array.isArray(index) ? index : [index]).sort());\n};\n\nvar moveArrayAt = function moveArrayAt(data, from, to) {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n\nvar swapArrayAt = function swapArrayAt(data, indexA, indexB) {\n  var temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n\nfunction prepend(data, value) {\n  return [].concat(Object(toConsumableArray["a" /* default */])(Array.isArray(value) ? value : [value || undefined]), Object(toConsumableArray["a" /* default */])(data));\n}\n\nfunction insert(data, index, value) {\n  return [].concat(Object(toConsumableArray["a" /* default */])(data.slice(0, index)), Object(toConsumableArray["a" /* default */])(Array.isArray(value) ? value : [value || undefined]), Object(toConsumableArray["a" /* default */])(data.slice(index)));\n}\n\nvar fillEmptyArray = function fillEmptyArray(value) {\n  return Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n};\n\nvar fillBooleanArray = function fillBooleanArray(value) {\n  return (Array.isArray(value) ? value : [value]).map(function (data) {\n    if (isObject(data)) {\n      var object = {};\n\n      for (var key in data) {\n        object[key] = true;\n      }\n\n      return object;\n    }\n\n    return true;\n  });\n};\n\nvar index_esm_mapIds = function mapIds() {\n  var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keyName = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (false) { var value, _iterator10, _step10; }\n\n  return values.map(function (value) {\n    return Object.assign(Object(defineProperty["a" /* default */])({}, keyName, generateId()), value);\n  });\n};\n\nvar index_esm_useFieldArray = function useFieldArray(_ref24) {\n  var control = _ref24.control,\n      name = _ref24.name,\n      _ref24$keyName = _ref24.keyName,\n      keyName = _ref24$keyName === void 0 ? \'id\' : _ref24$keyName;\n  var methods = index_esm_useFormContext();\n\n  if (false) {}\n\n  var focusIndexRef = Object(react["useRef"])(-1);\n\n  var _ref25 = control || methods.control,\n      isFormDirty = _ref25.isFormDirty,\n      updateWatchedValue = _ref25.updateWatchedValue,\n      resetFieldArrayFunctionRef = _ref25.resetFieldArrayFunctionRef,\n      fieldArrayNamesRef = _ref25.fieldArrayNamesRef,\n      fieldsRef = _ref25.fieldsRef,\n      defaultValuesRef = _ref25.defaultValuesRef,\n      removeFieldEventListener = _ref25.removeFieldEventListener,\n      formStateRef = _ref25.formStateRef,\n      shallowFieldsStateRef = _ref25.shallowFieldsStateRef,\n      updateFormState = _ref25.updateFormState,\n      readFormStateRef = _ref25.readFormStateRef,\n      validFieldsRef = _ref25.validFieldsRef,\n      fieldsWithValidationRef = _ref25.fieldsWithValidationRef,\n      fieldArrayDefaultValuesRef = _ref25.fieldArrayDefaultValuesRef,\n      validateResolver = _ref25.validateResolver,\n      getValues = _ref25.getValues,\n      shouldUnregister = _ref25.shouldUnregister,\n      fieldArrayValuesRef = _ref25.fieldArrayValuesRef;\n\n  var fieldArrayParentName = getFieldArrayParentName(name);\n  var memoizedDefaultValues = Object(react["useRef"])(Object(toConsumableArray["a" /* default */])(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName) ? get(fieldArrayDefaultValuesRef.current, name, []) : get(shouldUnregister ? defaultValuesRef.current : shallowFieldsStateRef.current, name, [])));\n\n  var _useState3 = Object(react["useState"])(index_esm_mapIds(memoizedDefaultValues.current, keyName)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fields = _useState4[0],\n      setFields = _useState4[1];\n\n  set(fieldArrayValuesRef.current, name, fields);\n\n  var omitKey = function omitKey(fields) {\n    return fields.map(function () {\n      var _a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _b = keyName,\n          omitted = _a[_b],\n          rest = __rest(_a, [typeof _b === "symbol" ? _b : _b + ""]);\n\n      return rest;\n    });\n  };\n\n  fieldArrayNamesRef.current.add(name);\n  var getFieldArrayValue = Object(react["useCallback"])(function () {\n    return get(fieldArrayValuesRef.current, name, []);\n  }, []);\n\n  var getCurrentFieldsValues = function getCurrentFieldsValues() {\n    return get(getValues(), name, getFieldArrayValue()).map(function (item, index) {\n      return Object.assign(Object.assign({}, getFieldArrayValue()[index]), item);\n    });\n  };\n\n  fieldArrayNamesRef.current.add(name);\n\n  if (fieldArrayParentName && !get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)) {\n    set(fieldArrayDefaultValuesRef.current, fieldArrayParentName, cloneObject(get(defaultValuesRef.current, fieldArrayParentName)));\n  }\n\n  var setFieldAndValidState = function setFieldAndValidState(fieldsValues) {\n    setFields(fieldsValues);\n    set(fieldArrayValuesRef.current, name, fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      var values = getValues();\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  var resetFields = function resetFields() {\n    for (var key in fieldsRef.current) {\n      isMatchFieldArrayName(key, name) && removeFieldEventListener(fieldsRef.current[key], true);\n    }\n  };\n\n  var cleanup = function cleanup(ref) {\n    return !compact(get(ref, name, [])).length && unset(ref, name);\n  };\n\n  var updateDirtyFieldsWithDefaultValues = function updateDirtyFieldsWithDefaultValues(updatedFieldArrayValues) {\n    if (updatedFieldArrayValues) {\n      set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n    }\n  };\n\n  var batchStateUpdate = function batchStateUpdate(method, args, updatedFieldValues) {\n    var updatedFormValues = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    var shouldSet = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    var shouldUpdateValid = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n    if (get(shallowFieldsStateRef.current, name)) {\n      var output = method(get(shallowFieldsStateRef.current, name), args.argA, args.argB);\n      shouldSet && set(shallowFieldsStateRef.current, name, output);\n    }\n\n    if (get(fieldArrayDefaultValuesRef.current, name)) {\n      var _output = method(get(fieldArrayDefaultValuesRef.current, name), args.argA, args.argB);\n\n      shouldSet && set(fieldArrayDefaultValuesRef.current, name, _output);\n      cleanup(fieldArrayDefaultValuesRef.current);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      var _output2 = method(get(formStateRef.current.errors, name), args.argA, args.argB);\n\n      shouldSet && set(formStateRef.current.errors, name, _output2);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (readFormStateRef.current.touched && get(formStateRef.current.touched, name)) {\n      var _output3 = method(get(formStateRef.current.touched, name), args.argA, args.argB);\n\n      shouldSet && set(formStateRef.current.touched, name, _output3);\n      cleanup(formStateRef.current.touched);\n    }\n\n    if (readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) {\n      var _output4 = method(get(formStateRef.current.dirtyFields, name, []), args.argC, args.argD);\n\n      shouldSet && set(formStateRef.current.dirtyFields, name, _output4);\n      updateDirtyFieldsWithDefaultValues(updatedFieldValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (shouldUpdateValid && readFormStateRef.current.isValid && !validateResolver) {\n      set(validFieldsRef.current, name, method(get(validFieldsRef.current, name, []), args.argA));\n      cleanup(validFieldsRef.current);\n      set(fieldsWithValidationRef.current, name, method(get(fieldsWithValidationRef.current, name, []), args.argA));\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    updateFormState({\n      isDirty: isFormDirty(name, omitKey(updatedFormValues))\n    });\n  };\n\n  var append = function append(value) {\n    var shouldFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var updateFormValues = [].concat(Object(toConsumableArray["a" /* default */])(getCurrentFieldsValues()), Object(toConsumableArray["a" /* default */])(index_esm_mapIds(Array.isArray(value) ? value : [value], keyName)));\n    setFieldAndValidState(updateFormValues);\n\n    if (readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) {\n      updateDirtyFieldsWithDefaultValues(updateFormValues);\n      updateFormState({\n        isDirty: true,\n        dirtyFields: formStateRef.current.dirtyFields\n      });\n    }\n\n    !shouldUnregister && set(shallowFieldsStateRef.current, name, [].concat(Object(toConsumableArray["a" /* default */])(get(shallowFieldsStateRef.current, name) || []), [value]));\n    focusIndexRef.current = shouldFocus ? fields.length : -1;\n  };\n\n  var prepend$1 = function prepend$1(value) {\n    var shouldFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var emptyArray = fillEmptyArray(value);\n    var updatedFieldArrayValues = prepend(getCurrentFieldsValues(), index_esm_mapIds(Array.isArray(value) ? value : [value], keyName));\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(prepend, {\n      argA: emptyArray,\n      argC: fillBooleanArray(value)\n    }, updatedFieldArrayValues);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  var remove = function remove(index) {\n    var fieldValues = getCurrentFieldsValues();\n    var updatedFieldValues = removeArrayAt(fieldValues, index);\n    setFieldAndValidState(updatedFieldValues);\n    resetFields();\n    batchStateUpdate(removeArrayAt, {\n      argA: index,\n      argC: index\n    }, updatedFieldValues, removeArrayAt(fieldValues, index), true, true);\n  };\n\n  var insert$1 = function insert$1(index, value) {\n    var shouldFocus = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var emptyArray = fillEmptyArray(value);\n    var fieldValues = getCurrentFieldsValues();\n    var updatedFieldArrayValues = insert(fieldValues, index, index_esm_mapIds(Array.isArray(value) ? value : [value], keyName));\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(insert, {\n      argA: index,\n      argB: emptyArray,\n      argC: index,\n      argD: fillBooleanArray(value)\n    }, updatedFieldArrayValues, insert(fieldValues, index));\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  var swap = function swap(indexA, indexB) {\n    var fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState(Object(toConsumableArray["a" /* default */])(fieldValues));\n    batchStateUpdate(swapArrayAt, {\n      argA: indexA,\n      argB: indexB,\n      argC: indexA,\n      argD: indexB\n    }, undefined, fieldValues, false);\n  };\n\n  var move = function move(from, to) {\n    var fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState(Object(toConsumableArray["a" /* default */])(fieldValues));\n    batchStateUpdate(moveArrayAt, {\n      argA: from,\n      argB: to,\n      argC: from,\n      argD: to\n    }, undefined, fieldValues, false);\n  };\n\n  Object(react["useEffect"])(function () {\n    if (false) {}\n\n    var defaultValues = get(fieldArrayDefaultValuesRef.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValuesRef.current, name, defaultValues);\n    }\n\n    updateWatchedValue(name);\n\n    if (focusIndexRef.current > -1) {\n      for (var key in fieldsRef.current) {\n        var field = fieldsRef.current[key];\n\n        if (key.startsWith("".concat(name, "[").concat(focusIndexRef.current, "]")) && field.ref.focus) {\n          field.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [fields, name]);\n  Object(react["useEffect"])(function () {\n    var resetFunctions = resetFieldArrayFunctionRef.current;\n    var fieldArrayNames = fieldArrayNamesRef.current;\n\n    if (!getFieldArrayParentName(name)) {\n      resetFunctions[name] = function (data) {\n        resetFields();\n        !data && unset(fieldArrayDefaultValuesRef.current, name);\n        unset(shallowFieldsStateRef.current, name);\n        memoizedDefaultValues.current = get(data || defaultValuesRef.current, name);\n        setFields(index_esm_mapIds(memoizedDefaultValues.current, keyName));\n      };\n    }\n\n    return function () {\n      if (false) {}\n\n      resetFields();\n      delete resetFunctions[name];\n      unset(fieldArrayValuesRef, name);\n      fieldArrayNames.delete(name);\n    };\n  }, []);\n  return {\n    swap: Object(react["useCallback"])(swap, [name]),\n    move: Object(react["useCallback"])(move, [name]),\n    prepend: Object(react["useCallback"])(prepend$1, [name]),\n    append: Object(react["useCallback"])(append, [name, fields]),\n    remove: Object(react["useCallback"])(remove, [name]),\n    insert: Object(react["useCallback"])(insert$1, [name]),\n    fields: fields\n  };\n};\n\nfunction useWatch(_ref26) {\n  var control = _ref26.control,\n      name = _ref26.name,\n      defaultValue = _ref26.defaultValue;\n  var methods = index_esm_useFormContext();\n\n  if (false) {}\n\n  var _ref27 = control || methods.control,\n      useWatchFieldsRef = _ref27.useWatchFieldsRef,\n      useWatchRenderFunctionsRef = _ref27.useWatchRenderFunctionsRef,\n      watchInternal = _ref27.watchInternal,\n      defaultValuesRef = _ref27.defaultValuesRef;\n\n  var updateValue = Object(react["useState"])()[1];\n  var idRef = Object(react["useRef"])();\n  var defaultValueRef = Object(react["useRef"])(defaultValue);\n  Object(react["useEffect"])(function () {\n    if (false) {}\n\n    var id = idRef.current = generateId();\n    var watchFieldsHookRender = useWatchRenderFunctionsRef.current;\n    var watchFieldsHook = useWatchFieldsRef.current;\n    watchFieldsHook[id] = new Set();\n\n    watchFieldsHookRender[id] = function () {\n      return updateValue({});\n    };\n\n    watchInternal(name, defaultValueRef.current, id);\n    return function () {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [name, useWatchRenderFunctionsRef, useWatchFieldsRef, watchInternal, defaultValueRef]);\n  return idRef.current ? watchInternal(name, defaultValueRef.current, idRef.current) : isUndefined(defaultValue) ? isString(name) ? get(defaultValuesRef.current, name) : Array.isArray(name) ? name.reduce(function (previous, inputName) {\n    return Object.assign(Object.assign({}, previous), Object(defineProperty["a" /* default */])({}, inputName, get(defaultValuesRef.current, inputName)));\n  }, {}) : defaultValuesRef.current : defaultValue;\n}\n\nvar getInputValue = function getInputValue(event) {\n  return isPrimitive(event) || !isObject(event.target) || isObject(event.target) && !event.type ? event : isUndefined(event.target.value) ? event.target.checked : event.target.value;\n};\n\nfunction useField(_ref28) {\n  var name = _ref28.name,\n      rules = _ref28.rules,\n      defaultValue = _ref28.defaultValue,\n      control = _ref28.control,\n      onFocus = _ref28.onFocus;\n  var methods = index_esm_useFormContext();\n\n  if (false) {}\n\n  var _ref29 = control || methods.control,\n      defaultValuesRef = _ref29.defaultValuesRef,\n      setValue = _ref29.setValue,\n      register = _ref29.register,\n      unregister = _ref29.unregister,\n      trigger = _ref29.trigger,\n      mode = _ref29.mode,\n      _ref29$reValidateMode = _ref29.reValidateMode,\n      isReValidateOnBlur = _ref29$reValidateMode.isReValidateOnBlur,\n      isReValidateOnChange = _ref29$reValidateMode.isReValidateOnChange,\n      _ref29$formStateRef$c = _ref29.formStateRef.current,\n      isSubmitted = _ref29$formStateRef$c.isSubmitted,\n      touched = _ref29$formStateRef$c.touched,\n      errors = _ref29$formStateRef$c.errors,\n      dirtyFields = _ref29$formStateRef$c.dirtyFields,\n      updateFormState = _ref29.updateFormState,\n      readFormStateRef = _ref29.readFormStateRef,\n      fieldsRef = _ref29.fieldsRef,\n      fieldArrayNamesRef = _ref29.fieldArrayNamesRef,\n      shallowFieldsStateRef = _ref29.shallowFieldsStateRef;\n\n  var isNotFieldArray = !index_esm_isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n  var getInitialValue = function getInitialValue() {\n    return !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray ? get(shallowFieldsStateRef.current, name) : isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue;\n  };\n\n  var _useState5 = Object(react["useState"])(getInitialValue()),\n      _useState6 = _slicedToArray(_useState5, 2),\n      value = _useState6[0],\n      setInputStateValue = _useState6[1];\n\n  var valueRef = Object(react["useRef"])(value);\n  var ref = Object(react["useRef"])({\n    focus: function focus() {\n      return null;\n    }\n  });\n  var onFocusRef = Object(react["useRef"])(onFocus || function () {\n    if (isFunction(ref.current.focus)) {\n      ref.current.focus();\n    }\n\n    if (false) {}\n  });\n  var shouldValidate = Object(react["useCallback"])(function (isBlurEvent) {\n    return !skipValidation(Object.assign({\n      isBlurEvent: isBlurEvent,\n      isReValidateOnBlur: isReValidateOnBlur,\n      isReValidateOnChange: isReValidateOnChange,\n      isSubmitted: isSubmitted,\n      isTouched: !!get(touched, name)\n    }, mode));\n  }, [isReValidateOnBlur, isReValidateOnChange, isSubmitted, touched, name, mode]);\n  var commonTask = Object(react["useCallback"])(function (_ref30) {\n    var _ref31 = _slicedToArray(_ref30, 1),\n        event = _ref31[0];\n\n    var data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n  var registerField = Object(react["useCallback"])(function (shouldUpdateValue) {\n    if (false) {}\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = Object.assign({\n        ref: fieldsRef.current[name].ref\n      }, rules);\n    } else {\n      register(Object.defineProperty({\n        name: name,\n        focus: onFocusRef.current\n      }, \'value\', {\n        set: function set(data) {\n          setInputStateValue(data);\n          valueRef.current = data;\n        },\n        get: function get() {\n          return valueRef.current;\n        }\n      }), rules);\n      shouldUpdateValue = isUndefined(get(defaultValuesRef.current, name));\n    }\n\n    shouldUpdateValue && isNotFieldArray && setInputStateValue(getInitialValue());\n  }, [rules, name, register]);\n  Object(react["useEffect"])(function () {\n    return function () {\n      return unregister(name);\n    };\n  }, [name]);\n  Object(react["useEffect"])(function () {\n    if (false) {}\n\n    registerField();\n  }, [registerField]);\n  Object(react["useEffect"])(function () {\n    !fieldsRef.current[name] && registerField(true);\n  });\n  var onBlur = Object(react["useCallback"])(function () {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched: touched\n      });\n    }\n\n    shouldValidate(true) && trigger(name);\n  }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\n  var onChange = Object(react["useCallback"])(function () {\n    for (var _len = arguments.length, event = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n      event[_key2] = arguments[_key2];\n    }\n\n    return setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true\n    });\n  }, [setValue, name, shouldValidate]);\n  return {\n    field: {\n      onChange: onChange,\n      onBlur: onBlur,\n      name: name,\n      value: value,\n      ref: ref\n    },\n    state: {\n      inValid: !get(errors, name),\n      isDirty: !!get(dirtyFields, name),\n      isTouched: !!get(touched, name)\n    }\n  };\n}\n\nvar index_esm_Controller = function Controller(props) {\n  var rules = props.rules,\n      as = props.as,\n      render = props.render,\n      defaultValue = props.defaultValue,\n      control = props.control,\n      onFocus = props.onFocus,\n      rest = __rest(props, ["rules", "as", "render", "defaultValue", "control", "onFocus"]);\n\n  var _useField = useField(props),\n      field = _useField.field;\n\n  var componentProps = Object.assign(Object.assign({}, rest), field);\n  return as ? Object(react["isValidElement"])(as) ? Object(react["cloneElement"])(as, componentProps) : Object(react["createElement"])(as, componentProps) : render ? render(field) : null;\n};\n\n\n// EXTERNAL MODULE: ./.cache/gatsby-browser-entry.js\nvar gatsby_browser_entry = __webpack_require__("Wbzz");\n\n// EXTERNAL MODULE: ./node_modules/cleave.js/react.js\nvar cleave_js_react = __webpack_require__("5VHT");\nvar cleave_js_react_default = /*#__PURE__*/__webpack_require__.n(cleave_js_react);\n\n// EXTERNAL MODULE: ./src/components/Layout/index.js + 3 modules\nvar Layout = __webpack_require__("Zttt");\n\n// EXTERNAL MODULE: ./src/components/Alert.js\nvar Alert = __webpack_require__("/9v8");\n\n// EXTERNAL MODULE: ./src/components/PrivateRoute.js\nvar PrivateRoute = __webpack_require__("nxaZ");\n\n// EXTERNAL MODULE: ./src/app/hooks/index.js + 11 modules\nvar hooks = __webpack_require__("NqsT");\n\n// CONCATENATED MODULE: ./src/pages/signup/index.js\nfunction ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){Object(defineProperty["a" /* default */])(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}var signup_Signup=function Signup(_ref){var _tourneyQuery$data,_userSignupQuery$data2,_tourneyQuery$data2,_tourneyQuery$data3,_tourneyQuery$data4;var location=_ref.location;var form=useForm({mode:"onTouched"});var tourneyQuery=Object(hooks["d" /* useTourney */])();var userSignupMut=Object(hooks["c" /* useMutUserSignup */])();var userDataMut=Object(hooks["b" /* useMutUserData */])();var userJoinedQuery=Object(hooks["g" /* useUserJoined */])();// Prepopulate data\nvar userDataQuery=Object(hooks["e" /* useUserData */])();var userSignupQuery=Object(hooks["h" /* useUserSignup */])();Object(react["useEffect"])(function(){var _userDataQuery$data,_userSignupQuery$data,_profile$stylepoints,_profile$stylepoints2,_profile$stylepoints3,_profile$stylepoints4;var profile=(_userDataQuery$data=userDataQuery.data)===null||_userDataQuery$data===void 0?void 0:_userDataQuery$data.profile;var signup=(_userSignupQuery$data=userSignupQuery.data)===null||_userSignupQuery$data===void 0?void 0:_userSignupQuery$data.data;form.reset(_objectSpread(_objectSpread({},profile),{},{stylepoints:{"sup-agg":profile===null||profile===void 0?void 0:(_profile$stylepoints=profile.stylepoints)===null||_profile$stylepoints===void 0?void 0:_profile$stylepoints.aggressive,"obj-sla":profile===null||profile===void 0?void 0:(_profile$stylepoints2=profile.stylepoints)===null||_profile$stylepoints2===void 0?void 0:_profile$stylepoints2.slayer,"anc-mob":profile===null||profile===void 0?void 0:(_profile$stylepoints3=profile.stylepoints)===null||_profile$stylepoints3===void 0?void 0:_profile$stylepoints3.mobile,"fle-foc":profile===null||profile===void 0?void 0:(_profile$stylepoints4=profile.stylepoints)===null||_profile$stylepoints4===void 0?void 0:_profile$stylepoints4.focused},smashgg:{link:profile!==null&&profile!==void 0&&profile.smashgg?"smash.gg/user/"+(profile===null||profile===void 0?void 0:profile.smashgg):undefined,code:signup===null||signup===void 0?void 0:signup.confirmationCode},recruiting:signup===null||signup===void 0?void 0:signup.recruiting,legal:signup===null||signup===void 0?void 0:signup.legal}));},[userDataQuery.data,userSignupQuery.data]);// Handle form submit\nvar handleSignup=function handleSignup(reg){var _reg$smashgg;var div=function div(n){return[Math.abs(n),Number(n)];};var _div=div(reg.stylepoints["sup-agg"]),support=_div[0],aggressive=_div[1];var _div2=div(reg.stylepoints["obj-sla"]),objective=_div2[0],slayer=_div2[1];var _div3=div(reg.stylepoints["anc-mob"]),anchor=_div3[0],mobile=_div3[1];var _div4=div(reg.stylepoints["fle-foc"]),flex=_div4[0],focused=_div4[1];var profile={ign:reg.ign,sw:reg.sw,ranks:{sz:reg.ranks.sz,tc:reg.ranks.tc,rm:reg.ranks.rm,cb:reg.ranks.cb},stylepoints:{support:support,aggressive:aggressive,objective:objective,slayer:slayer,anchor:anchor,mobile:mobile,flex:flex,focused:focused},cxp:{amount:reg.cxp.amount,placement:Number(reg.cxp.placement)},smashgg:reg.smashgg.link.split("/").slice(-1)[0]};var signup={tzOffset:new Date().getTimezoneOffset(),recruiting:Boolean(reg.recruiting),confirmationCode:((_reg$smashgg=reg.smashgg)===null||_reg$smashgg===void 0?void 0:_reg$smashgg.code)||"[sub]",legal:Boolean(reg.legal)};userDataMut.mutate(profile);userSignupMut.mutate(signup);Object(gatsby_browser_entry["c" /* navigate */])("complete",{state:{complete:true}});};return/*#__PURE__*/react_default.a.createElement(signup_FormContainer,{location:location},/*#__PURE__*/react_default.a.createElement(signup_FromStatusAlerts,{tourneyQuery:tourneyQuery,userSignupQuery:userSignupQuery,userJoinedQuery:userJoinedQuery}),/*#__PURE__*/react_default.a.createElement("form",{class:"form"},/*#__PURE__*/react_default.a.createElement("div",{class:"section px-0"},/*#__PURE__*/react_default.a.createElement("div",{class:"title"},"Enter your in-game info"),/*#__PURE__*/react_default.a.createElement("div",{class:"columns is-2 is-variable"},/*#__PURE__*/react_default.a.createElement("div",{class:"column"},/*#__PURE__*/react_default.a.createElement(signup_Field,{label:"In-game name",expanded:true},/*#__PURE__*/react_default.a.createElement(signup_Input,{name:"ign",control:form.control,errors:form.errors,options:{blocks:[10]},rules:{required:"This field is required"}}),/*#__PURE__*/react_default.a.createElement(signup_ErrorMessage,{options:[form.errors,"ign"]}))),/*#__PURE__*/react_default.a.createElement("div",{class:"column is-7"},/*#__PURE__*/react_default.a.createElement(signup_Field,{label:"Friend-code",expanded:true},/*#__PURE__*/react_default.a.createElement(signup_Input,{name:"sw",control:form.control,errors:form.errors,defaultValue:"SW-",options:{prefix:"SW",blocks:[2,4,4,4],delimiter:"-",numericOnly:true},rules:{minLength:{value:17,message:"This field is required"}}}),/*#__PURE__*/react_default.a.createElement(signup_ErrorMessage,{options:[form.errors,"sw"]})))),/*#__PURE__*/react_default.a.createElement("div",{class:"field"},/*#__PURE__*/react_default.a.createElement(signup_Field,{label:"Ranks"},/*#__PURE__*/react_default.a.createElement("div",{class:"columns is-2 is-variable"},/*#__PURE__*/react_default.a.createElement("div",{class:"column"},/*#__PURE__*/react_default.a.createElement("div",{class:"columns is-2 is-variable is-mobile"},/*#__PURE__*/react_default.a.createElement(signup_RankField,{label:"Splat Zones"},/*#__PURE__*/react_default.a.createElement(signup_Input,signup_rankProps("ranks.sz",form.control,form.errors)),/*#__PURE__*/react_default.a.createElement(signup_ErrorMessage,{options:[form.errors,"ranks.sz",/*#__PURE__*/react_default.a.createElement(signup_InvalidRank,null)]})),/*#__PURE__*/react_default.a.createElement(signup_RankField,{label:"Tower Control"},/*#__PURE__*/react_default.a.createElement(signup_Input,signup_rankProps("ranks.tc",form.control,form.errors)),/*#__PURE__*/react_default.a.createElement(signup_ErrorMessage,{options:[form.errors,"ranks.tc",/*#__PURE__*/react_default.a.createElement(signup_InvalidRank,null)]})))),/*#__PURE__*/react_default.a.createElement("div",{class:"column"},/*#__PURE__*/react_default.a.createElement("div",{class:"columns is-2 is-variable is-mobile"},/*#__PURE__*/react_default.a.createElement(signup_RankField,{label:"Rainmaker"},/*#__PURE__*/react_default.a.createElement(signup_Input,signup_rankProps("ranks.rm",form.control,form.errors)),/*#__PURE__*/react_default.a.createElement(signup_ErrorMessage,{options:[form.errors,"ranks.rm",/*#__PURE__*/react_default.a.createElement(signup_InvalidRank,null)]})),/*#__PURE__*/react_default.a.createElement(signup_RankField,{label:"Clam Blitz"},/*#__PURE__*/react_default.a.createElement(signup_Input,signup_rankProps("ranks.cb",form.control,form.errors)),/*#__PURE__*/react_default.a.createElement(signup_ErrorMessage,{options:[form.errors,"ranks.cb",/*#__PURE__*/react_default.a.createElement(signup_InvalidRank,null)]})))))))),/*#__PURE__*/react_default.a.createElement("div",{class:"section px-0 pt-5"},/*#__PURE__*/react_default.a.createElement("div",{class:"title"},"Set your stylepoints (playstyle)"),[["Supportive","Aggressive","How would you characterize your play?"],["Objective","Slayer","What do you focus on when playing?"],["Anchor","Mobile","What does your position look like?"],["Flexible","Focused","How would you describe your weapon pool?"]].map(function(field,index){return/*#__PURE__*/react_default.a.createElement("div",{key:index,class:"section px-0 py-4"},/*#__PURE__*/react_default.a.createElement(signup_Field,{label:field[2]},/*#__PURE__*/react_default.a.createElement("div",{class:"is-size-5 is-pulled-right"},field[1]),/*#__PURE__*/react_default.a.createElement("div",{class:"is-size-5"},field[0]),/*#__PURE__*/react_default.a.createElement("div",{class:"field"},/*#__PURE__*/react_default.a.createElement(index_esm_Controller,{control:form.control,as:/*#__PURE__*/react_default.a.createElement("input",null),defaultValue:5,class:"slider is-fullwidth is-large is-circle mt-0",type:"range",name:stylepointsName(field),id:field[0],min:"1",max:"9",step:"1"}))));})),/*#__PURE__*/react_default.a.createElement("div",{class:"section px-0"},/*#__PURE__*/react_default.a.createElement("div",{class:"title"},"Enter your competitive experience"),/*#__PURE__*/react_default.a.createElement("div",{class:"section px-0 py-4"},/*#__PURE__*/react_default.a.createElement(signup_Field,{label:"How many tournaments have you competed in?"},/*#__PURE__*/react_default.a.createElement("div",{class:"py-3"},["This is my first tournament :0","I\'ve played in one or two tournaments.","I\'ve played in some tournaments.","I\'ve played in a lot of tournaments."].map(function(field,index){return/*#__PURE__*/react_default.a.createElement("div",{key:index,class:"field"},/*#__PURE__*/react_default.a.createElement("input",{ref:form.register({required:"This field is required"}),value:field,class:"is-checkradio is-medium",name:"cxp.amount",type:"radio",id:field}),/*#__PURE__*/react_default.a.createElement("label",{htmlFor:field},field));})),/*#__PURE__*/react_default.a.createElement(signup_ErrorMessage,{options:[form.errors,"cxp.amount"]}))),/*#__PURE__*/react_default.a.createElement("div",{class:"section px-0 py-4"},/*#__PURE__*/react_default.a.createElement(signup_Field,{label:"What is the highest number of teams you\'ve placed above?"},/*#__PURE__*/react_default.a.createElement("div",{style:{maxWidth:"15rem"}},/*#__PURE__*/react_default.a.createElement(signup_Input,{name:"cxp.placement",control:form.control,errors:form.errors,options:{numericOnly:true,blocks:[4]}}),/*#__PURE__*/react_default.a.createElement("div",{class:"help"},"You can skip this if it\'s not applicable"))))),/*#__PURE__*/react_default.a.createElement("div",{class:"section px-0"},/*#__PURE__*/react_default.a.createElement("div",{class:"title"},"Set up smash.gg"),(!((_tourneyQuery$data=tourneyQuery.data)!==null&&_tourneyQuery$data!==void 0&&_tourneyQuery$data.hasClosed())||((_userSignupQuery$data2=userSignupQuery.data)===null||_userSignupQuery$data2===void 0?void 0:_userSignupQuery$data2.type)==="signup")&&/*#__PURE__*/react_default.a.createElement(react_default.a.Fragment,null,/*#__PURE__*/react_default.a.createElement(signup_Field,{label:"Register on smash.gg, copy the confirmation code when it pops up."},/*#__PURE__*/react_default.a.createElement("div",{class:"input is-normal p-1",style:{height:"600px"}},/*#__PURE__*/react_default.a.createElement("div",{style:{borderRadius:"4px",width:"100%",height:"100%",overflow:"hidden"}},/*#__PURE__*/react_default.a.createElement("iframe",{style:{borderWidth:"10px"},title:"smashgg",src:"https://smash.gg/"+((_tourneyQuery$data2=tourneyQuery.data)===null||_tourneyQuery$data2===void 0?void 0:_tourneyQuery$data2.slug)+"/register/embed",height:"100%",width:"100%"})))),/*#__PURE__*/react_default.a.createElement("div",{class:"field"},/*#__PURE__*/react_default.a.createElement("div",{class:"section px-0 py-4"},/*#__PURE__*/react_default.a.createElement(signup_Field,{label:"Enter your smash.gg confirmation code."},/*#__PURE__*/react_default.a.createElement("div",{style:{maxWidth:"20em"}},/*#__PURE__*/react_default.a.createElement("div",{class:"field has-addons"},/*#__PURE__*/react_default.a.createElement("div",{class:"control is-expanded"},/*#__PURE__*/react_default.a.createElement(signup_Input,{name:"smashgg.code",control:form.control,errors:form.errors,defaultValue:"#",options:{lowercase:true,blocks:[7],prefix:"#"},rules:{pattern:{value:/^#[0-9A-Fa-f]{6}$/,message:"Invalid confirmation code"},minLength:{value:2,message:"This field is required"}}})),/*#__PURE__*/react_default.a.createElement("div",{class:"control"},/*#__PURE__*/react_default.a.createElement("span",{class:"input ease is-medium px-5 is-static",style:{backgroundColor:form.watch("smashgg.code","#dbdbdb")}})))),/*#__PURE__*/react_default.a.createElement(signup_ErrorMessage,{options:[form.errors,"smashgg.code"]}))))),/*#__PURE__*/react_default.a.createElement(signup_Field,{label:/*#__PURE__*/react_default.a.createElement("div",{class:"is-size-4"},"Paste the url of your"," ",/*#__PURE__*/react_default.a.createElement("a",{href:"https://smash.gg/profile",target:"_blank",rel:"noreferrer"}," ","smash.gg profile"),".")},/*#__PURE__*/react_default.a.createElement("div",{style:{maxWidth:"20em"}},/*#__PURE__*/react_default.a.createElement("div",{class:"control is-medium has-icons-right"},/*#__PURE__*/react_default.a.createElement(signup_Input,{name:"smashgg.link",control:form.control,errors:form.errors,defaultValue:"smash.gg/user/",options:{lowercase:true,prefix:"smash.gg/user/",blocks:[22]},rules:{pattern:{value:/^smash\\.gg\\/user\\/[0-9A-Fa-f]{8}$/,message:"Invalid user slug"},minLength:{value:15,message:"This field is required"}}}))),/*#__PURE__*/react_default.a.createElement(signup_ErrorMessage,{options:[form.errors,"smashgg.link"]}))),/*#__PURE__*/react_default.a.createElement("div",{class:"section px-0 pt-5"},/*#__PURE__*/react_default.a.createElement("div",{class:"title"},"Final steps"),/*#__PURE__*/react_default.a.createElement("blockquote",{class:"subtitle"},"Misc stuff, are donuts considered bagels."),/*#__PURE__*/react_default.a.createElement("div",{class:"section px-0 py-4"},/*#__PURE__*/react_default.a.createElement(signup_Field,null,/*#__PURE__*/react_default.a.createElement("input",{ref:form.register,value:true,class:"is-checkradio is-medium",name:"recruiting",type:"checkbox",id:"cx-1"}),/*#__PURE__*/react_default.a.createElement("label",{htmlFor:"cx-1"},"Are you currently recruiting?")),/*#__PURE__*/react_default.a.createElement(signup_Field,null,/*#__PURE__*/react_default.a.createElement("input",{ref:form.register({required:"Please accept the terms and conditions"}),value:true,class:"is-checkradio is-medium",name:"legal",type:"checkbox",id:"cx-2"}),/*#__PURE__*/react_default.a.createElement("label",{htmlFor:"cx-2"},"I agree to the ",/*#__PURE__*/react_default.a.createElement(gatsby_browser_entry["a" /* Link */],{to:"/legal"},"terms and conditions"),"."),/*#__PURE__*/react_default.a.createElement(signup_ErrorMessage,{options:[form.errors,"legal"]})))),/*#__PURE__*/react_default.a.createElement(signup_Field,null,/*#__PURE__*/react_default.a.createElement("button",{type:"button",onClick:form.handleSubmit(handleSignup),class:"button is-centered is-primary is-large",disabled:!userJoinedQuery.data||((_tourneyQuery$data3=tourneyQuery.data)===null||_tourneyQuery$data3===void 0?void 0:_tourneyQuery$data3.hasEnded())},"Submit"),!userJoinedQuery.data&&/*#__PURE__*/react_default.a.createElement(signup_ErrorMessage,{options:[{submit:{message:"You must be in the Off the Dial discord server to participate"}},"submit"]}),((_tourneyQuery$data4=tourneyQuery.data)===null||_tourneyQuery$data4===void 0?void 0:_tourneyQuery$data4.hasEnded())&&/*#__PURE__*/react_default.a.createElement(signup_ErrorMessage,{options:[{submit:{message:"Registration is closed"}},"submit"]}))));};var signup_FormContainer=function FormContainer(_ref2){var location=_ref2.location,children=_ref2.children;return/*#__PURE__*/react_default.a.createElement(PrivateRoute["a" /* default */],{location:location},/*#__PURE__*/react_default.a.createElement(Layout["a" /* default */],{pageTitle:"Signup"},/*#__PURE__*/react_default.a.createElement("div",{class:"section"},/*#__PURE__*/react_default.a.createElement("div",{class:"container is-fullhd"},/*#__PURE__*/react_default.a.createElement("div",{class:"columns is-centered"},/*#__PURE__*/react_default.a.createElement("div",{class:"column is-9"},children))))));};var signup_FromStatusAlerts=function FromStatusAlerts(_ref3){var _tourneyQuery$data5;var tourneyQuery=_ref3.tourneyQuery,userSignupQuery=_ref3.userSignupQuery,userJoinedQuery=_ref3.userJoinedQuery;var alerts=[];if((_tourneyQuery$data5=tourneyQuery.data)!==null&&_tourneyQuery$data5!==void 0&&_tourneyQuery$data5.hasEnded()){alerts.push({type:"info",message:/*#__PURE__*/react_default.a.createElement(react_default.a.Fragment,null,/*#__PURE__*/react_default.a.createElement("b",null,"Registration is closed"),". Be on the look out for tournaments in the future!")});}else if(!tourneyQuery.isLoading){var _userSignupQuery$data3;if((_userSignupQuery$data3=userSignupQuery.data)!==null&&_userSignupQuery$data3!==void 0&&_userSignupQuery$data3.data){alerts.push({type:"info",message:/*#__PURE__*/react_default.a.createElement(react_default.a.Fragment,null,/*#__PURE__*/react_default.a.createElement("b",null,"You have already signed up"),". To update your signup information, re-submit this form.")});}else if(!userSignupQuery.isLoading){var _tourneyQuery$data6;if((_tourneyQuery$data6=tourneyQuery.data)!==null&&_tourneyQuery$data6!==void 0&&_tourneyQuery$data6.hasClosed()){alerts.push({type:"warning",message:/*#__PURE__*/react_default.a.createElement(react_default.a.Fragment,null,/*#__PURE__*/react_default.a.createElement("b",null,"Signups have closed"),". You can still submit this form and sign up as a sub.")});}}if(userJoinedQuery.data===false){alerts.push({type:"danger",message:/*#__PURE__*/react_default.a.createElement(react_default.a.Fragment,null,"You must be in the Off the Dial discord server to participate.")});}}return/*#__PURE__*/react_default.a.createElement(react_default.a.Fragment,null,alerts.map(function(alert,i){return/*#__PURE__*/react_default.a.createElement(Alert["a" /* default */],{type:alert.type,key:i},/*#__PURE__*/react_default.a.createElement("span",null,alert.message));}));};var signup_Field=function Field(_ref4){var label=_ref4.label,expanded=_ref4.expanded,children=_ref4.children;return/*#__PURE__*/react_default.a.createElement("div",{class:"field"},/*#__PURE__*/react_default.a.createElement("div",{class:"control "+(expanded&&"is-expanded")},label&&/*#__PURE__*/react_default.a.createElement("div",{class:"is-size-4"},label),children));};var signup_RankField=function RankField(_ref5){var label=_ref5.label,children=_ref5.children;return/*#__PURE__*/react_default.a.createElement("div",{class:"column"},/*#__PURE__*/react_default.a.createElement("div",{class:"control is-expanded"},/*#__PURE__*/react_default.a.createElement("div",{class:"is-size-5"},label),children));};var signup_Input=function Input(input){return/*#__PURE__*/react_default.a.createElement(index_esm_Controller,Object.assign({defaultValue:""},input,{className:"input is-medium "+(signup_get(input.errors,input.name)&&"is-danger"),as:/*#__PURE__*/react_default.a.createElement(cleave_js_react_default.a,null)}));};var signup_ErrorMessage=function ErrorMessage(_ref6){var _ref6$options=_ref6.options,errors=_ref6$options[0],name=_ref6$options[1],longest=_ref6$options[2];var error=signup_get(errors,name);if(error){return/*#__PURE__*/react_default.a.createElement("p",{class:"help is-danger"},error.message);}else{return/*#__PURE__*/react_default.a.createElement("p",{class:"help is-danger is-invisible"},longest||/*#__PURE__*/react_default.a.createElement("br",null));}};var signup_get=function get(obj,path){return path.split(".").reduce(function(acc,cur){return acc===null||acc===void 0?void 0:acc[cur];},obj);};var stylepointsName=function stylepointsName(_ref7){var left=_ref7[0],right=_ref7[1];var parse=function parse(field){return field.toLowerCase().slice(0,3);};return"stylepoints."+parse(left)+"-"+parse(right);};var signup_rankProps=function rankProps(name,control,errors){return{name:name,control:control,errors:errors,options:{delimiter:".",blocks:[5,1],uppercase:true},rules:{required:/*#__PURE__*/react_default.a.createElement(react_default.a.Fragment,null,"This field is required",/*#__PURE__*/react_default.a.createElement("br",null),/*#__PURE__*/react_default.a.createElement("br",null)),pattern:{value:/(^C-$)|(^C$)|(^C\\+$)|(^B-$)|(^B$)|(^B\\+$)|(^A-$)|(^A$)|(^A\\+$)|(^S$)|(^S\\+\\d$)|(^X[1-9]\\d{3}(\\.\\d)?$)/,message:/*#__PURE__*/react_default.a.createElement(signup_InvalidRank,null)}}};};var signup_InvalidRank=function InvalidRank(){return/*#__PURE__*/react_default.a.createElement(react_default.a.Fragment,null,"Invalid Rank",/*#__PURE__*/react_default.a.createElement("br",null),"ex:"," ",["C","A-","S+0","X2350.1"].map(function(field,index){return/*#__PURE__*/react_default.a.createElement("span",{key:index},/*#__PURE__*/react_default.a.createElement("code",{class:"has-text-danger",key:index},field),index!==3&&", ");}));};// const Signup = ({ location }) => (\n//   <PrivateRoute location={location} redirect="/signup" component={Form} />\n// )\n/* harmony default export */ var pages_signup = __webpack_exports__["default"] = (signup_Signup);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///cttA\n')}}]);